/*
THIS FILE WAS GENERATED AUTOMATICALLY FROM glad.h, DO NOT EDIT
*/



#ifndef OSGLFUNCTIONS_H
#define OSGLFUNCTIONS_H



#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN 1
#endif
#include <windows.h>
#endif



#include <stddef.h>
#ifndef GLEXT_64_TYPES_DEFINED
/* This code block is duplicated in glxext.h, so must be protected */
#define GLEXT_64_TYPES_DEFINED
/* Define int32_t, int64_t, and uint64_t types for UST/MSC */
/* (as used in the GL_EXT_timer_query extension). */
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
#elif defined(__sun__) || defined(__digital__)
#include <inttypes.h>
#if defined(__STDC__)
#if defined(__arch64__) || defined(_LP64)
typedef long int int64_t;
typedef unsigned long int uint64_t;
#else
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#endif /* __arch64__ */
#endif /* __STDC__ */
#elif defined( __VMS ) || defined(__sgi)
#include <inttypes.h>
#elif defined(__SCO__) || defined(__USLC__)
#include <stdint.h>
#elif defined(__UNIXOS2__) || defined(__SOL64__)
typedef long int int32_t;
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#elif defined(_WIN32) && defined(__GNUC__)
#include <stdint.h>
#elif defined(_WIN32)
typedef __int32 int32_t;
typedef __int64 int64_t;
typedef unsigned __int64 uint64_t;
#else
/* Fallback if nothing above works */
#include <inttypes.h>
#endif
#endif




typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef signed char GLbyte;
typedef short GLshort;
typedef int GLint;
typedef int GLclampx;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef int GLsizei;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef char GLchar;
typedef char GLcharARB;
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
typedef unsigned short GLhalfARB;
typedef unsigned short GLhalf;
typedef GLint GLfixed;
typedef ptrdiff_t GLintptr;
typedef ptrdiff_t GLsizeiptr;
typedef int64_t GLint64;
typedef uint64_t GLuint64;
typedef ptrdiff_t GLintptrARB;
typedef ptrdiff_t GLsizeiptrARB;
typedef int64_t GLint64EXT;
typedef uint64_t GLuint64EXT;




#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_FALSE 0
#define GL_TRUE 1
#define GL_POINTS 0x0000
#define GL_LINES 0x0001
#define GL_LINE_LOOP 0x0002
#define GL_LINE_STRIP 0x0003
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRIANGLE_FAN 0x0006
#define GL_QUADS 0x0007
#define GL_NEVER 0x0200
#define GL_LESS 0x0201
#define GL_EQUAL 0x0202
#define GL_LEQUAL 0x0203
#define GL_GREATER 0x0204
#define GL_NOTEQUAL 0x0205
#define GL_GEQUAL 0x0206
#define GL_ALWAYS 0x0207
#define GL_ZERO 0
#define GL_ONE 1
#define GL_SRC_COLOR 0x0300
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_SRC_ALPHA 0x0302
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_DST_ALPHA 0x0304
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_DST_COLOR 0x0306
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_NONE 0
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_FRONT 0x0404
#define GL_BACK 0x0405
#define GL_LEFT 0x0406
#define GL_RIGHT 0x0407
#define GL_FRONT_AND_BACK 0x0408
#define GL_NO_ERROR 0
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_VALUE 0x0501
#define GL_INVALID_OPERATION 0x0502
#define GL_OUT_OF_MEMORY 0x0505
#define GL_CW 0x0900
#define GL_CCW 0x0901
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_FRONT_FACE 0x0B46
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_FUNC 0x0B74
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_VIEWPORT 0x0BA2
#define GL_DITHER 0x0BD0
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND 0x0BE2
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_DRAW_BUFFER 0x0C01
#define GL_READ_BUFFER 0x0C02
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_DOUBLEBUFFER 0x0C32
#define GL_STEREO 0x0C33
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_2D 0x0DE1
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_DONT_CARE 0x1100
#define GL_FASTEST 0x1101
#define GL_NICEST 0x1102
#define GL_BYTE 0x1400
#define GL_UNSIGNED_BYTE 0x1401
#define GL_SHORT 0x1402
#define GL_UNSIGNED_SHORT 0x1403
#define GL_INT 0x1404
#define GL_UNSIGNED_INT 0x1405
#define GL_FLOAT 0x1406
#define GL_DOUBLE 0x140A
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_CLEAR 0x1500
#define GL_AND 0x1501
#define GL_AND_REVERSE 0x1502
#define GL_COPY 0x1503
#define GL_AND_INVERTED 0x1504
#define GL_NOOP 0x1505
#define GL_XOR 0x1506
#define GL_OR 0x1507
#define GL_NOR 0x1508
#define GL_EQUIV 0x1509
#define GL_INVERT 0x150A
#define GL_OR_REVERSE 0x150B
#define GL_COPY_INVERTED 0x150C
#define GL_OR_INVERTED 0x150D
#define GL_NAND 0x150E
#define GL_SET 0x150F
#define GL_TEXTURE 0x1702
#define GL_COLOR 0x1800
#define GL_DEPTH 0x1801
#define GL_STENCIL 0x1802
#define GL_STENCIL_INDEX 0x1901
#define GL_DEPTH_COMPONENT 0x1902
#define GL_RED 0x1903
#define GL_GREEN 0x1904
#define GL_BLUE 0x1905
#define GL_ALPHA 0x1906
#define GL_RGB 0x1907
#define GL_RGBA 0x1908
#define GL_POINT 0x1B00
#define GL_LINE 0x1B01
#define GL_FILL 0x1B02
#define GL_KEEP 0x1E00
#define GL_REPLACE 0x1E01
#define GL_INCR 0x1E02
#define GL_DECR 0x1E03
#define GL_VENDOR 0x1F00
#define GL_RENDERER 0x1F01
#define GL_VERSION 0x1F02
#define GL_EXTENSIONS 0x1F03
#define GL_NEAREST 0x2600
#define GL_LINEAR 0x2601
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_REPEAT 0x2901
#define GL_R3_G3_B2 0x2A10
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB8 0x8051
#define GL_RGB10 0x8052
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGBA2 0x8055
#define GL_RGBA4 0x8056
#define GL_RGB5_A1 0x8057
#define GL_RGBA8 0x8058
#define GL_RGB10_A2 0x8059
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_CURRENT_BIT 0x00000001
#define GL_POINT_BIT 0x00000002
#define GL_LINE_BIT 0x00000004
#define GL_POLYGON_BIT 0x00000008
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_LIGHTING_BIT 0x00000040
#define GL_FOG_BIT 0x00000080
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_VIEWPORT_BIT 0x00000800
#define GL_TRANSFORM_BIT 0x00001000
#define GL_ENABLE_BIT 0x00002000
#define GL_HINT_BIT 0x00008000
#define GL_EVAL_BIT 0x00010000
#define GL_LIST_BIT 0x00020000
#define GL_TEXTURE_BIT 0x00040000
#define GL_SCISSOR_BIT 0x00080000
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_QUAD_STRIP 0x0008
#define GL_POLYGON 0x0009
#define GL_ACCUM 0x0100
#define GL_LOAD 0x0101
#define GL_RETURN 0x0102
#define GL_MULT 0x0103
#define GL_ADD 0x0104
#define GL_AUX0 0x0409
#define GL_AUX1 0x040A
#define GL_AUX2 0x040B
#define GL_AUX3 0x040C
#define GL_2D 0x0600
#define GL_3D 0x0601
#define GL_3D_COLOR 0x0602
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_POINT_TOKEN 0x0701
#define GL_LINE_TOKEN 0x0702
#define GL_POLYGON_TOKEN 0x0703
#define GL_BITMAP_TOKEN 0x0704
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_EXP 0x0800
#define GL_EXP2 0x0801
#define GL_COEFF 0x0A00
#define GL_ORDER 0x0A01
#define GL_DOMAIN 0x0A02
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_CURRENT_COLOR 0x0B00
#define GL_CURRENT_INDEX 0x0B01
#define GL_CURRENT_NORMAL 0x0B02
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_POINT_SMOOTH 0x0B10
#define GL_LINE_STIPPLE 0x0B24
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_LIST_MODE 0x0B30
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_LIST_BASE 0x0B32
#define GL_LIST_INDEX 0x0B33
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_EDGE_FLAG 0x0B43
#define GL_LIGHTING 0x0B50
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_SHADE_MODEL 0x0B54
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_COLOR_MATERIAL 0x0B57
#define GL_FOG 0x0B60
#define GL_FOG_INDEX 0x0B61
#define GL_FOG_DENSITY 0x0B62
#define GL_FOG_START 0x0B63
#define GL_FOG_END 0x0B64
#define GL_FOG_MODE 0x0B65
#define GL_FOG_COLOR 0x0B66
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_MATRIX_MODE 0x0BA0
#define GL_NORMALIZE 0x0BA1
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_ALPHA_TEST 0x0BC0
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_LOGIC_OP 0x0BF1
#define GL_AUX_BUFFERS 0x0C00
#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_INDEX_MODE 0x0C30
#define GL_RGBA_MODE 0x0C31
#define GL_RENDER_MODE 0x0C40
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_FOG_HINT 0x0C54
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_MAP_COLOR 0x0D10
#define GL_MAP_STENCIL 0x0D11
#define GL_INDEX_SHIFT 0x0D12
#define GL_INDEX_OFFSET 0x0D13
#define GL_RED_SCALE 0x0D14
#define GL_RED_BIAS 0x0D15
#define GL_ZOOM_X 0x0D16
#define GL_ZOOM_Y 0x0D17
#define GL_GREEN_SCALE 0x0D18
#define GL_GREEN_BIAS 0x0D19
#define GL_BLUE_SCALE 0x0D1A
#define GL_BLUE_BIAS 0x0D1B
#define GL_ALPHA_SCALE 0x0D1C
#define GL_ALPHA_BIAS 0x0D1D
#define GL_DEPTH_SCALE 0x0D1E
#define GL_DEPTH_BIAS 0x0D1F
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_MAX_LIGHTS 0x0D31
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_INDEX_BITS 0x0D51
#define GL_RED_BITS 0x0D52
#define GL_GREEN_BITS 0x0D53
#define GL_BLUE_BITS 0x0D54
#define GL_ALPHA_BITS 0x0D55
#define GL_DEPTH_BITS 0x0D56
#define GL_STENCIL_BITS 0x0D57
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_AUTO_NORMAL 0x0D80
#define GL_MAP1_COLOR_4 0x0D90
#define GL_MAP1_INDEX 0x0D91
#define GL_MAP1_NORMAL 0x0D92
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_MAP2_INDEX 0x0DB1
#define GL_MAP2_NORMAL 0x0DB2
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_VERTEX_ARRAY 0x8074
#define GL_NORMAL_ARRAY 0x8075
#define GL_COLOR_ARRAY 0x8076
#define GL_INDEX_ARRAY 0x8077
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_TEXTURE_BORDER 0x1005
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_AMBIENT 0x1200
#define GL_DIFFUSE 0x1201
#define GL_SPECULAR 0x1202
#define GL_POSITION 0x1203
#define GL_SPOT_DIRECTION 0x1204
#define GL_SPOT_EXPONENT 0x1205
#define GL_SPOT_CUTOFF 0x1206
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_COMPILE 0x1300
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_2_BYTES 0x1407
#define GL_3_BYTES 0x1408
#define GL_4_BYTES 0x1409
#define GL_EMISSION 0x1600
#define GL_SHININESS 0x1601
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_COLOR_INDEXES 0x1603
#define GL_MODELVIEW 0x1700
#define GL_PROJECTION 0x1701
#define GL_COLOR_INDEX 0x1900
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_BITMAP 0x1A00
#define GL_RENDER 0x1C00
#define GL_FEEDBACK 0x1C01
#define GL_SELECT 0x1C02
#define GL_FLAT 0x1D00
#define GL_SMOOTH 0x1D01
#define GL_S 0x2000
#define GL_T 0x2001
#define GL_R 0x2002
#define GL_Q 0x2003
#define GL_MODULATE 0x2100
#define GL_DECAL 0x2101
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_TEXTURE_ENV 0x2300
#define GL_EYE_LINEAR 0x2400
#define GL_OBJECT_LINEAR 0x2401
#define GL_SPHERE_MAP 0x2402
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_OBJECT_PLANE 0x2501
#define GL_EYE_PLANE 0x2502
#define GL_CLAMP 0x2900
#define GL_ALPHA4 0x803B
#define GL_ALPHA8 0x803C
#define GL_ALPHA12 0x803D
#define GL_ALPHA16 0x803E
#define GL_LUMINANCE4 0x803F
#define GL_LUMINANCE8 0x8040
#define GL_LUMINANCE12 0x8041
#define GL_LUMINANCE16 0x8042
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_INTENSITY 0x8049
#define GL_INTENSITY4 0x804A
#define GL_INTENSITY8 0x804B
#define GL_INTENSITY12 0x804C
#define GL_INTENSITY16 0x804D
#define GL_V2F 0x2A20
#define GL_V3F 0x2A21
#define GL_C4UB_V2F 0x2A22
#define GL_C4UB_V3F 0x2A23
#define GL_C3F_V3F 0x2A24
#define GL_N3F_V3F 0x2A25
#define GL_C4F_N3F_V3F 0x2A26
#define GL_T2F_V3F 0x2A27
#define GL_T4F_V4F 0x2A28
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#define GL_CLIP_PLANE0 0x3000
#define GL_CLIP_PLANE1 0x3001
#define GL_CLIP_PLANE2 0x3002
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_PLANE5 0x3005
#define GL_LIGHT0 0x4000
#define GL_LIGHT1 0x4001
#define GL_LIGHT2 0x4002
#define GL_LIGHT3 0x4003
#define GL_LIGHT4 0x4004
#define GL_LIGHT5 0x4005
#define GL_LIGHT6 0x4006
#define GL_LIGHT7 0x4007
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_TEXTURE_3D 0x806F
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_BGR 0x80E0
#define GL_BGRA 0x80E1
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_RESCALE_NORMAL 0x803A
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#define GL_SINGLE_COLOR 0x81F9
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_MULTISAMPLE 0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLES 0x80A9
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#define GL_MAX_TEXTURE_UNITS 0x84E2
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#define GL_MULTISAMPLE_BIT 0x20000000
#define GL_NORMAL_MAP 0x8511
#define GL_REFLECTION_MAP 0x8512
#define GL_COMPRESSED_ALPHA 0x84E9
#define GL_COMPRESSED_LUMINANCE 0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#define GL_COMPRESSED_INTENSITY 0x84EC
#define GL_COMBINE 0x8570
#define GL_COMBINE_RGB 0x8571
#define GL_COMBINE_ALPHA 0x8572
#define GL_SOURCE0_RGB 0x8580
#define GL_SOURCE1_RGB 0x8581
#define GL_SOURCE2_RGB 0x8582
#define GL_SOURCE0_ALPHA 0x8588
#define GL_SOURCE1_ALPHA 0x8589
#define GL_SOURCE2_ALPHA 0x858A
#define GL_OPERAND0_RGB 0x8590
#define GL_OPERAND1_RGB 0x8591
#define GL_OPERAND2_RGB 0x8592
#define GL_OPERAND0_ALPHA 0x8598
#define GL_OPERAND1_ALPHA 0x8599
#define GL_OPERAND2_ALPHA 0x859A
#define GL_RGB_SCALE 0x8573
#define GL_ADD_SIGNED 0x8574
#define GL_INTERPOLATE 0x8575
#define GL_SUBTRACT 0x84E7
#define GL_CONSTANT 0x8576
#define GL_PRIMARY_COLOR 0x8577
#define GL_PREVIOUS 0x8578
#define GL_DOT3_RGB 0x86AE
#define GL_DOT3_RGBA 0x86AF
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_INCR_WRAP 0x8507
#define GL_DECR_WRAP 0x8508
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_POINT_SIZE_MIN 0x8126
#define GL_POINT_SIZE_MAX 0x8127
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#define GL_GENERATE_MIPMAP 0x8191
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_FOG_COORDINATE_SOURCE 0x8450
#define GL_FOG_COORDINATE 0x8451
#define GL_FRAGMENT_DEPTH 0x8452
#define GL_CURRENT_FOG_COORDINATE 0x8453
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY 0x8457
#define GL_COLOR_SUM 0x8458
#define GL_CURRENT_SECONDARY_COLOR 0x8459
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
#define GL_SECONDARY_COLOR_ARRAY 0x845E
#define GL_TEXTURE_FILTER_CONTROL 0x8500
#define GL_DEPTH_TEXTURE_MODE 0x884B
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_SUBTRACT 0x800A
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_MIN 0x8007
#define GL_MAX 0x8008
#define GL_CONSTANT_COLOR 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_CONSTANT_ALPHA 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_CURRENT_QUERY 0x8865
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_ARRAY_BUFFER 0x8892
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_READ_ONLY 0x88B8
#define GL_WRITE_ONLY 0x88B9
#define GL_READ_WRITE 0x88BA
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_STREAM_COPY 0x88E2
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STATIC_COPY 0x88E6
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_COPY 0x88EA
#define GL_SAMPLES_PASSED 0x8914
#define GL_SRC1_ALPHA 0x8589
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
#define GL_FOG_COORD_SRC 0x8450
#define GL_FOG_COORD 0x8451
#define GL_CURRENT_FOG_COORD 0x8453
#define GL_FOG_COORD_ARRAY_TYPE 0x8454
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455
#define GL_FOG_COORD_ARRAY_POINTER 0x8456
#define GL_FOG_COORD_ARRAY 0x8457
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#define GL_SRC0_RGB 0x8580
#define GL_SRC1_RGB 0x8581
#define GL_SRC2_RGB 0x8582
#define GL_SRC0_ALPHA 0x8588
#define GL_SRC2_ALPHA 0x858A
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_VERTEX_SHADER 0x8B31
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_SHADER_TYPE 0x8B4F
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_BOOL 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT4 0x8B5C
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_DELETE_STATUS 0x8B80
#define GL_COMPILE_STATUS 0x8B81
#define GL_LINK_STATUS 0x8B82
#define GL_VALIDATE_STATUS 0x8B83
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_LOWER_LEFT 0x8CA1
#define GL_UPPER_LEFT 0x8CA2
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
#define GL_POINT_SPRITE 0x8861
#define GL_COORD_REPLACE 0x8862
#define GL_MAX_TEXTURE_COORDS 0x8871
#define GL_VERSION_1_0 1
#define GL_VERSION_1_1 1
#define GL_VERSION_1_2 1
#define GL_VERSION_1_3 1
#define GL_VERSION_1_4 1
#define GL_VERSION_1_5 1
#define GL_VERSION_2_0 1
#define GL_BUFFER_SIZE_ARB 0x8764
#define GL_BUFFER_USAGE_ARB 0x8765
#define GL_ARRAY_BUFFER_ARB 0x8892
#define GL_ELEMENT_ARRAY_BUFFER_ARB 0x8893
#define GL_ARRAY_BUFFER_BINDING_ARB 0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
#define GL_READ_ONLY_ARB 0x88B8
#define GL_WRITE_ONLY_ARB 0x88B9
#define GL_READ_WRITE_ARB 0x88BA
#define GL_BUFFER_ACCESS_ARB 0x88BB
#define GL_BUFFER_MAPPED_ARB 0x88BC
#define GL_BUFFER_MAP_POINTER_ARB 0x88BD
#define GL_STREAM_DRAW_ARB 0x88E0
#define GL_STREAM_READ_ARB 0x88E1
#define GL_STREAM_COPY_ARB 0x88E2
#define GL_STATIC_DRAW_ARB 0x88E4
#define GL_STATIC_READ_ARB 0x88E5
#define GL_STATIC_COPY_ARB 0x88E6
#define GL_DYNAMIC_DRAW_ARB 0x88E8
#define GL_DYNAMIC_READ_ARB 0x88E9
#define GL_DYNAMIC_COPY_ARB 0x88EA
#define GL_PIXEL_PACK_BUFFER_ARB 0x88EB
#define GL_PIXEL_UNPACK_BUFFER_ARB 0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING_ARB 0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_DEPTH_STENCIL 0x84F9
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_FRAMEBUFFER 0x8D40
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX16 0x8D49
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_MAX_SAMPLES 0x8D57
#define GL_INDEX 0x8222
#define GL_TEXTURE_RED_TYPE_ARB 0x8C10
#define GL_TEXTURE_GREEN_TYPE_ARB 0x8C11
#define GL_TEXTURE_BLUE_TYPE_ARB 0x8C12
#define GL_TEXTURE_ALPHA_TYPE_ARB 0x8C13
#define GL_TEXTURE_LUMINANCE_TYPE_ARB 0x8C14
#define GL_TEXTURE_INTENSITY_TYPE_ARB 0x8C15
#define GL_TEXTURE_DEPTH_TYPE_ARB 0x8C16
#define GL_UNSIGNED_NORMALIZED_ARB 0x8C17
#define GL_RGBA32F_ARB 0x8814
#define GL_RGB32F_ARB 0x8815
#define GL_ALPHA32F_ARB 0x8816
#define GL_INTENSITY32F_ARB 0x8817
#define GL_LUMINANCE32F_ARB 0x8818
#define GL_LUMINANCE_ALPHA32F_ARB 0x8819
#define GL_RGBA16F_ARB 0x881A
#define GL_RGB16F_ARB 0x881B
#define GL_ALPHA16F_ARB 0x881C
#define GL_INTENSITY16F_ARB 0x881D
#define GL_LUMINANCE16F_ARB 0x881E
#define GL_LUMINANCE_ALPHA16F_ARB 0x881F
#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
#define GL_MAX_RENDERBUFFER_SIZE_EXT 0x84E8
#define GL_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_RENDERBUFFER_BINDING_EXT 0x8CA7
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE_EXT 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED_EXT 0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS_EXT 0x8CDF
#define GL_COLOR_ATTACHMENT0_EXT 0x8CE0
#define GL_COLOR_ATTACHMENT1_EXT 0x8CE1
#define GL_COLOR_ATTACHMENT2_EXT 0x8CE2
#define GL_COLOR_ATTACHMENT3_EXT 0x8CE3
#define GL_COLOR_ATTACHMENT4_EXT 0x8CE4
#define GL_COLOR_ATTACHMENT5_EXT 0x8CE5
#define GL_COLOR_ATTACHMENT6_EXT 0x8CE6
#define GL_COLOR_ATTACHMENT7_EXT 0x8CE7
#define GL_COLOR_ATTACHMENT8_EXT 0x8CE8
#define GL_COLOR_ATTACHMENT9_EXT 0x8CE9
#define GL_COLOR_ATTACHMENT10_EXT 0x8CEA
#define GL_COLOR_ATTACHMENT11_EXT 0x8CEB
#define GL_COLOR_ATTACHMENT12_EXT 0x8CEC
#define GL_COLOR_ATTACHMENT13_EXT 0x8CED
#define GL_COLOR_ATTACHMENT14_EXT 0x8CEE
#define GL_COLOR_ATTACHMENT15_EXT 0x8CEF
#define GL_DEPTH_ATTACHMENT_EXT 0x8D00
#define GL_STENCIL_ATTACHMENT_EXT 0x8D20
#define GL_FRAMEBUFFER_EXT 0x8D40
#define GL_RENDERBUFFER_EXT 0x8D41
#define GL_RENDERBUFFER_WIDTH_EXT 0x8D42
#define GL_RENDERBUFFER_HEIGHT_EXT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
#define GL_STENCIL_INDEX1_EXT 0x8D46
#define GL_STENCIL_INDEX4_EXT 0x8D47
#define GL_STENCIL_INDEX8_EXT 0x8D48
#define GL_STENCIL_INDEX16_EXT 0x8D49
#define GL_RENDERBUFFER_RED_SIZE_EXT 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE_EXT 0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE_EXT 0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE_EXT 0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE_EXT 0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE_EXT 0x8D55
#define GL_VERTEX_ARRAY_BINDING_APPLE 0x85B5
#define GL_ARB_vertex_buffer_object 1
#define GL_ARB_pixel_buffer_object 1
#define GL_ARB_vertex_array_object 1
#define GL_ARB_framebuffer_object 1
#define GL_ARB_texture_float 1
#define GL_EXT_framebuffer_object 1
#define GL_APPLE_vertex_array_object 1



typedef void (*PFNGLCULLFACEPROC)(GLenum mode);
typedef void (*PFNGLFRONTFACEPROC)(GLenum mode);
typedef void (*PFNGLHINTPROC)(GLenum target, GLenum mode);
typedef void (*PFNGLLINEWIDTHPROC)(GLfloat width);
typedef void (*PFNGLPOINTSIZEPROC)(GLfloat size);
typedef void (*PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
typedef void (*PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (*PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (*PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat* params);
typedef void (*PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (*PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint* params);
typedef void (*PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels);
typedef void (*PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels);
typedef void (*PFNGLDRAWBUFFERPROC)(GLenum buf);
typedef void (*PFNGLCLEARPROC)(GLbitfield mask);
typedef void (*PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (*PFNGLCLEARSTENCILPROC)(GLint s);
typedef void (*PFNGLCLEARDEPTHPROC)(GLdouble depth);
typedef void (*PFNGLSTENCILMASKPROC)(GLuint mask);
typedef void (*PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (*PFNGLDEPTHMASKPROC)(GLboolean flag);
typedef void (*PFNGLDISABLEPROC)(GLenum cap);
typedef void (*PFNGLENABLEPROC)(GLenum cap);
typedef void (*PFNGLFINISHPROC)();
typedef void (*PFNGLFLUSHPROC)();
typedef void (*PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
typedef void (*PFNGLLOGICOPPROC)(GLenum opcode);
typedef void (*PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
typedef void (*PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
typedef void (*PFNGLDEPTHFUNCPROC)(GLenum func);
typedef void (*PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
typedef void (*PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
typedef void (*PFNGLREADBUFFERPROC)(GLenum src);
typedef void (*PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
typedef void (*PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean* data);
typedef void (*PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble* data);
typedef GLenum (*PFNGLGETERRORPROC)();
typedef void (*PFNGLGETFLOATVPROC)(GLenum pname, GLfloat* data);
typedef void (*PFNGLGETINTEGERVPROC)(GLenum pname, GLint* data);
typedef const GLubyte* (*PFNGLGETSTRINGPROC)(GLenum name);
typedef void (*PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
typedef void (*PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat* params);
typedef void (*PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef void (*PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat* params);
typedef void (*PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint* params);
typedef GLboolean (*PFNGLISENABLEDPROC)(GLenum cap);
typedef void (*PFNGLDEPTHRANGEPROC)(GLdouble near, GLdouble far);
typedef void (*PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (*PFNGLNEWLISTPROC)(GLuint list, GLenum mode);
typedef void (*PFNGLENDLISTPROC)();
typedef void (*PFNGLCALLLISTPROC)(GLuint list);
typedef void (*PFNGLCALLLISTSPROC)(GLsizei n, GLenum type, const void* lists);
typedef void (*PFNGLDELETELISTSPROC)(GLuint list, GLsizei range);
typedef GLuint (*PFNGLGENLISTSPROC)(GLsizei range);
typedef void (*PFNGLLISTBASEPROC)(GLuint base);
typedef void (*PFNGLBEGINPROC)(GLenum mode);
typedef void (*PFNGLBITMAPPROC)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte* bitmap);
typedef void (*PFNGLCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void (*PFNGLCOLOR3BVPROC)(const GLbyte* v);
typedef void (*PFNGLCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void (*PFNGLCOLOR3DVPROC)(const GLdouble* v);
typedef void (*PFNGLCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void (*PFNGLCOLOR3FVPROC)(const GLfloat* v);
typedef void (*PFNGLCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void (*PFNGLCOLOR3IVPROC)(const GLint* v);
typedef void (*PFNGLCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void (*PFNGLCOLOR3SVPROC)(const GLshort* v);
typedef void (*PFNGLCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void (*PFNGLCOLOR3UBVPROC)(const GLubyte* v);
typedef void (*PFNGLCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void (*PFNGLCOLOR3UIVPROC)(const GLuint* v);
typedef void (*PFNGLCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void (*PFNGLCOLOR3USVPROC)(const GLushort* v);
typedef void (*PFNGLCOLOR4BPROC)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
typedef void (*PFNGLCOLOR4BVPROC)(const GLbyte* v);
typedef void (*PFNGLCOLOR4DPROC)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
typedef void (*PFNGLCOLOR4DVPROC)(const GLdouble* v);
typedef void (*PFNGLCOLOR4FPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (*PFNGLCOLOR4FVPROC)(const GLfloat* v);
typedef void (*PFNGLCOLOR4IPROC)(GLint red, GLint green, GLint blue, GLint alpha);
typedef void (*PFNGLCOLOR4IVPROC)(const GLint* v);
typedef void (*PFNGLCOLOR4SPROC)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
typedef void (*PFNGLCOLOR4SVPROC)(const GLshort* v);
typedef void (*PFNGLCOLOR4UBPROC)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
typedef void (*PFNGLCOLOR4UBVPROC)(const GLubyte* v);
typedef void (*PFNGLCOLOR4UIPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
typedef void (*PFNGLCOLOR4UIVPROC)(const GLuint* v);
typedef void (*PFNGLCOLOR4USPROC)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
typedef void (*PFNGLCOLOR4USVPROC)(const GLushort* v);
typedef void (*PFNGLEDGEFLAGPROC)(GLboolean flag);
typedef void (*PFNGLEDGEFLAGVPROC)(const GLboolean* flag);
typedef void (*PFNGLENDPROC)();
typedef void (*PFNGLINDEXDPROC)(GLdouble c);
typedef void (*PFNGLINDEXDVPROC)(const GLdouble* c);
typedef void (*PFNGLINDEXFPROC)(GLfloat c);
typedef void (*PFNGLINDEXFVPROC)(const GLfloat* c);
typedef void (*PFNGLINDEXIPROC)(GLint c);
typedef void (*PFNGLINDEXIVPROC)(const GLint* c);
typedef void (*PFNGLINDEXSPROC)(GLshort c);
typedef void (*PFNGLINDEXSVPROC)(const GLshort* c);
typedef void (*PFNGLNORMAL3BPROC)(GLbyte nx, GLbyte ny, GLbyte nz);
typedef void (*PFNGLNORMAL3BVPROC)(const GLbyte* v);
typedef void (*PFNGLNORMAL3DPROC)(GLdouble nx, GLdouble ny, GLdouble nz);
typedef void (*PFNGLNORMAL3DVPROC)(const GLdouble* v);
typedef void (*PFNGLNORMAL3FPROC)(GLfloat nx, GLfloat ny, GLfloat nz);
typedef void (*PFNGLNORMAL3FVPROC)(const GLfloat* v);
typedef void (*PFNGLNORMAL3IPROC)(GLint nx, GLint ny, GLint nz);
typedef void (*PFNGLNORMAL3IVPROC)(const GLint* v);
typedef void (*PFNGLNORMAL3SPROC)(GLshort nx, GLshort ny, GLshort nz);
typedef void (*PFNGLNORMAL3SVPROC)(const GLshort* v);
typedef void (*PFNGLRASTERPOS2DPROC)(GLdouble x, GLdouble y);
typedef void (*PFNGLRASTERPOS2DVPROC)(const GLdouble* v);
typedef void (*PFNGLRASTERPOS2FPROC)(GLfloat x, GLfloat y);
typedef void (*PFNGLRASTERPOS2FVPROC)(const GLfloat* v);
typedef void (*PFNGLRASTERPOS2IPROC)(GLint x, GLint y);
typedef void (*PFNGLRASTERPOS2IVPROC)(const GLint* v);
typedef void (*PFNGLRASTERPOS2SPROC)(GLshort x, GLshort y);
typedef void (*PFNGLRASTERPOS2SVPROC)(const GLshort* v);
typedef void (*PFNGLRASTERPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (*PFNGLRASTERPOS3DVPROC)(const GLdouble* v);
typedef void (*PFNGLRASTERPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLRASTERPOS3FVPROC)(const GLfloat* v);
typedef void (*PFNGLRASTERPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void (*PFNGLRASTERPOS3IVPROC)(const GLint* v);
typedef void (*PFNGLRASTERPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (*PFNGLRASTERPOS3SVPROC)(const GLshort* v);
typedef void (*PFNGLRASTERPOS4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (*PFNGLRASTERPOS4DVPROC)(const GLdouble* v);
typedef void (*PFNGLRASTERPOS4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (*PFNGLRASTERPOS4FVPROC)(const GLfloat* v);
typedef void (*PFNGLRASTERPOS4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (*PFNGLRASTERPOS4IVPROC)(const GLint* v);
typedef void (*PFNGLRASTERPOS4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (*PFNGLRASTERPOS4SVPROC)(const GLshort* v);
typedef void (*PFNGLRECTDPROC)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
typedef void (*PFNGLRECTDVPROC)(const GLdouble* v1, const GLdouble* v2);
typedef void (*PFNGLRECTFPROC)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
typedef void (*PFNGLRECTFVPROC)(const GLfloat* v1, const GLfloat* v2);
typedef void (*PFNGLRECTIPROC)(GLint x1, GLint y1, GLint x2, GLint y2);
typedef void (*PFNGLRECTIVPROC)(const GLint* v1, const GLint* v2);
typedef void (*PFNGLRECTSPROC)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
typedef void (*PFNGLRECTSVPROC)(const GLshort* v1, const GLshort* v2);
typedef void (*PFNGLTEXCOORD1DPROC)(GLdouble s);
typedef void (*PFNGLTEXCOORD1DVPROC)(const GLdouble* v);
typedef void (*PFNGLTEXCOORD1FPROC)(GLfloat s);
typedef void (*PFNGLTEXCOORD1FVPROC)(const GLfloat* v);
typedef void (*PFNGLTEXCOORD1IPROC)(GLint s);
typedef void (*PFNGLTEXCOORD1IVPROC)(const GLint* v);
typedef void (*PFNGLTEXCOORD1SPROC)(GLshort s);
typedef void (*PFNGLTEXCOORD1SVPROC)(const GLshort* v);
typedef void (*PFNGLTEXCOORD2DPROC)(GLdouble s, GLdouble t);
typedef void (*PFNGLTEXCOORD2DVPROC)(const GLdouble* v);
typedef void (*PFNGLTEXCOORD2FPROC)(GLfloat s, GLfloat t);
typedef void (*PFNGLTEXCOORD2FVPROC)(const GLfloat* v);
typedef void (*PFNGLTEXCOORD2IPROC)(GLint s, GLint t);
typedef void (*PFNGLTEXCOORD2IVPROC)(const GLint* v);
typedef void (*PFNGLTEXCOORD2SPROC)(GLshort s, GLshort t);
typedef void (*PFNGLTEXCOORD2SVPROC)(const GLshort* v);
typedef void (*PFNGLTEXCOORD3DPROC)(GLdouble s, GLdouble t, GLdouble r);
typedef void (*PFNGLTEXCOORD3DVPROC)(const GLdouble* v);
typedef void (*PFNGLTEXCOORD3FPROC)(GLfloat s, GLfloat t, GLfloat r);
typedef void (*PFNGLTEXCOORD3FVPROC)(const GLfloat* v);
typedef void (*PFNGLTEXCOORD3IPROC)(GLint s, GLint t, GLint r);
typedef void (*PFNGLTEXCOORD3IVPROC)(const GLint* v);
typedef void (*PFNGLTEXCOORD3SPROC)(GLshort s, GLshort t, GLshort r);
typedef void (*PFNGLTEXCOORD3SVPROC)(const GLshort* v);
typedef void (*PFNGLTEXCOORD4DPROC)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (*PFNGLTEXCOORD4DVPROC)(const GLdouble* v);
typedef void (*PFNGLTEXCOORD4FPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (*PFNGLTEXCOORD4FVPROC)(const GLfloat* v);
typedef void (*PFNGLTEXCOORD4IPROC)(GLint s, GLint t, GLint r, GLint q);
typedef void (*PFNGLTEXCOORD4IVPROC)(const GLint* v);
typedef void (*PFNGLTEXCOORD4SPROC)(GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (*PFNGLTEXCOORD4SVPROC)(const GLshort* v);
typedef void (*PFNGLVERTEX2DPROC)(GLdouble x, GLdouble y);
typedef void (*PFNGLVERTEX2DVPROC)(const GLdouble* v);
typedef void (*PFNGLVERTEX2FPROC)(GLfloat x, GLfloat y);
typedef void (*PFNGLVERTEX2FVPROC)(const GLfloat* v);
typedef void (*PFNGLVERTEX2IPROC)(GLint x, GLint y);
typedef void (*PFNGLVERTEX2IVPROC)(const GLint* v);
typedef void (*PFNGLVERTEX2SPROC)(GLshort x, GLshort y);
typedef void (*PFNGLVERTEX2SVPROC)(const GLshort* v);
typedef void (*PFNGLVERTEX3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (*PFNGLVERTEX3DVPROC)(const GLdouble* v);
typedef void (*PFNGLVERTEX3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLVERTEX3FVPROC)(const GLfloat* v);
typedef void (*PFNGLVERTEX3IPROC)(GLint x, GLint y, GLint z);
typedef void (*PFNGLVERTEX3IVPROC)(const GLint* v);
typedef void (*PFNGLVERTEX3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (*PFNGLVERTEX3SVPROC)(const GLshort* v);
typedef void (*PFNGLVERTEX4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (*PFNGLVERTEX4DVPROC)(const GLdouble* v);
typedef void (*PFNGLVERTEX4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (*PFNGLVERTEX4FVPROC)(const GLfloat* v);
typedef void (*PFNGLVERTEX4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (*PFNGLVERTEX4IVPROC)(const GLint* v);
typedef void (*PFNGLVERTEX4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (*PFNGLVERTEX4SVPROC)(const GLshort* v);
typedef void (*PFNGLCLIPPLANEPROC)(GLenum plane, const GLdouble* equation);
typedef void (*PFNGLCOLORMATERIALPROC)(GLenum face, GLenum mode);
typedef void (*PFNGLFOGFPROC)(GLenum pname, GLfloat param);
typedef void (*PFNGLFOGFVPROC)(GLenum pname, const GLfloat* params);
typedef void (*PFNGLFOGIPROC)(GLenum pname, GLint param);
typedef void (*PFNGLFOGIVPROC)(GLenum pname, const GLint* params);
typedef void (*PFNGLLIGHTFPROC)(GLenum light, GLenum pname, GLfloat param);
typedef void (*PFNGLLIGHTFVPROC)(GLenum light, GLenum pname, const GLfloat* params);
typedef void (*PFNGLLIGHTIPROC)(GLenum light, GLenum pname, GLint param);
typedef void (*PFNGLLIGHTIVPROC)(GLenum light, GLenum pname, const GLint* params);
typedef void (*PFNGLLIGHTMODELFPROC)(GLenum pname, GLfloat param);
typedef void (*PFNGLLIGHTMODELFVPROC)(GLenum pname, const GLfloat* params);
typedef void (*PFNGLLIGHTMODELIPROC)(GLenum pname, GLint param);
typedef void (*PFNGLLIGHTMODELIVPROC)(GLenum pname, const GLint* params);
typedef void (*PFNGLLINESTIPPLEPROC)(GLint factor, GLushort pattern);
typedef void (*PFNGLMATERIALFPROC)(GLenum face, GLenum pname, GLfloat param);
typedef void (*PFNGLMATERIALFVPROC)(GLenum face, GLenum pname, const GLfloat* params);
typedef void (*PFNGLMATERIALIPROC)(GLenum face, GLenum pname, GLint param);
typedef void (*PFNGLMATERIALIVPROC)(GLenum face, GLenum pname, const GLint* params);
typedef void (*PFNGLPOLYGONSTIPPLEPROC)(const GLubyte* mask);
typedef void (*PFNGLSHADEMODELPROC)(GLenum mode);
typedef void (*PFNGLTEXENVFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (*PFNGLTEXENVFVPROC)(GLenum target, GLenum pname, const GLfloat* params);
typedef void (*PFNGLTEXENVIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (*PFNGLTEXENVIVPROC)(GLenum target, GLenum pname, const GLint* params);
typedef void (*PFNGLTEXGENDPROC)(GLenum coord, GLenum pname, GLdouble param);
typedef void (*PFNGLTEXGENDVPROC)(GLenum coord, GLenum pname, const GLdouble* params);
typedef void (*PFNGLTEXGENFPROC)(GLenum coord, GLenum pname, GLfloat param);
typedef void (*PFNGLTEXGENFVPROC)(GLenum coord, GLenum pname, const GLfloat* params);
typedef void (*PFNGLTEXGENIPROC)(GLenum coord, GLenum pname, GLint param);
typedef void (*PFNGLTEXGENIVPROC)(GLenum coord, GLenum pname, const GLint* params);
typedef void (*PFNGLFEEDBACKBUFFERPROC)(GLsizei size, GLenum type, GLfloat* buffer);
typedef void (*PFNGLSELECTBUFFERPROC)(GLsizei size, GLuint* buffer);
typedef GLint (*PFNGLRENDERMODEPROC)(GLenum mode);
typedef void (*PFNGLINITNAMESPROC)();
typedef void (*PFNGLLOADNAMEPROC)(GLuint name);
typedef void (*PFNGLPASSTHROUGHPROC)(GLfloat token);
typedef void (*PFNGLPOPNAMEPROC)();
typedef void (*PFNGLPUSHNAMEPROC)(GLuint name);
typedef void (*PFNGLCLEARACCUMPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (*PFNGLCLEARINDEXPROC)(GLfloat c);
typedef void (*PFNGLINDEXMASKPROC)(GLuint mask);
typedef void (*PFNGLACCUMPROC)(GLenum op, GLfloat value);
typedef void (*PFNGLPOPATTRIBPROC)();
typedef void (*PFNGLPUSHATTRIBPROC)(GLbitfield mask);
typedef void (*PFNGLMAP1DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points);
typedef void (*PFNGLMAP1FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points);
typedef void (*PFNGLMAP2DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points);
typedef void (*PFNGLMAP2FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points);
typedef void (*PFNGLMAPGRID1DPROC)(GLint un, GLdouble u1, GLdouble u2);
typedef void (*PFNGLMAPGRID1FPROC)(GLint un, GLfloat u1, GLfloat u2);
typedef void (*PFNGLMAPGRID2DPROC)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
typedef void (*PFNGLMAPGRID2FPROC)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
typedef void (*PFNGLEVALCOORD1DPROC)(GLdouble u);
typedef void (*PFNGLEVALCOORD1DVPROC)(const GLdouble* u);
typedef void (*PFNGLEVALCOORD1FPROC)(GLfloat u);
typedef void (*PFNGLEVALCOORD1FVPROC)(const GLfloat* u);
typedef void (*PFNGLEVALCOORD2DPROC)(GLdouble u, GLdouble v);
typedef void (*PFNGLEVALCOORD2DVPROC)(const GLdouble* u);
typedef void (*PFNGLEVALCOORD2FPROC)(GLfloat u, GLfloat v);
typedef void (*PFNGLEVALCOORD2FVPROC)(const GLfloat* u);
typedef void (*PFNGLEVALMESH1PROC)(GLenum mode, GLint i1, GLint i2);
typedef void (*PFNGLEVALPOINT1PROC)(GLint i);
typedef void (*PFNGLEVALMESH2PROC)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
typedef void (*PFNGLEVALPOINT2PROC)(GLint i, GLint j);
typedef void (*PFNGLALPHAFUNCPROC)(GLenum func, GLfloat ref);
typedef void (*PFNGLPIXELZOOMPROC)(GLfloat xfactor, GLfloat yfactor);
typedef void (*PFNGLPIXELTRANSFERFPROC)(GLenum pname, GLfloat param);
typedef void (*PFNGLPIXELTRANSFERIPROC)(GLenum pname, GLint param);
typedef void (*PFNGLPIXELMAPFVPROC)(GLenum map, GLsizei mapsize, const GLfloat* values);
typedef void (*PFNGLPIXELMAPUIVPROC)(GLenum map, GLsizei mapsize, const GLuint* values);
typedef void (*PFNGLPIXELMAPUSVPROC)(GLenum map, GLsizei mapsize, const GLushort* values);
typedef void (*PFNGLCOPYPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
typedef void (*PFNGLDRAWPIXELSPROC)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
typedef void (*PFNGLGETCLIPPLANEPROC)(GLenum plane, GLdouble* equation);
typedef void (*PFNGLGETLIGHTFVPROC)(GLenum light, GLenum pname, GLfloat* params);
typedef void (*PFNGLGETLIGHTIVPROC)(GLenum light, GLenum pname, GLint* params);
typedef void (*PFNGLGETMAPDVPROC)(GLenum target, GLenum query, GLdouble* v);
typedef void (*PFNGLGETMAPFVPROC)(GLenum target, GLenum query, GLfloat* v);
typedef void (*PFNGLGETMAPIVPROC)(GLenum target, GLenum query, GLint* v);
typedef void (*PFNGLGETMATERIALFVPROC)(GLenum face, GLenum pname, GLfloat* params);
typedef void (*PFNGLGETMATERIALIVPROC)(GLenum face, GLenum pname, GLint* params);
typedef void (*PFNGLGETPIXELMAPFVPROC)(GLenum map, GLfloat* values);
typedef void (*PFNGLGETPIXELMAPUIVPROC)(GLenum map, GLuint* values);
typedef void (*PFNGLGETPIXELMAPUSVPROC)(GLenum map, GLushort* values);
typedef void (*PFNGLGETPOLYGONSTIPPLEPROC)(GLubyte* mask);
typedef void (*PFNGLGETTEXENVFVPROC)(GLenum target, GLenum pname, GLfloat* params);
typedef void (*PFNGLGETTEXENVIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef void (*PFNGLGETTEXGENDVPROC)(GLenum coord, GLenum pname, GLdouble* params);
typedef void (*PFNGLGETTEXGENFVPROC)(GLenum coord, GLenum pname, GLfloat* params);
typedef void (*PFNGLGETTEXGENIVPROC)(GLenum coord, GLenum pname, GLint* params);
typedef GLboolean (*PFNGLISLISTPROC)(GLuint list);
typedef void (*PFNGLFRUSTUMPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (*PFNGLLOADIDENTITYPROC)();
typedef void (*PFNGLLOADMATRIXFPROC)(const GLfloat* m);
typedef void (*PFNGLLOADMATRIXDPROC)(const GLdouble* m);
typedef void (*PFNGLMATRIXMODEPROC)(GLenum mode);
typedef void (*PFNGLMULTMATRIXFPROC)(const GLfloat* m);
typedef void (*PFNGLMULTMATRIXDPROC)(const GLdouble* m);
typedef void (*PFNGLORTHOPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (*PFNGLPOPMATRIXPROC)();
typedef void (*PFNGLPUSHMATRIXPROC)();
typedef void (*PFNGLROTATEDPROC)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (*PFNGLROTATEFPROC)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLSCALEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (*PFNGLSCALEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLTRANSLATEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (*PFNGLTRANSLATEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (*PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices);
typedef void (*PFNGLGETPOINTERVPROC)(GLenum pname, void** params);
typedef void (*PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
typedef void (*PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (*PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (*PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (*PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (*PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
typedef void (*PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
typedef void (*PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
typedef void (*PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint* textures);
typedef void (*PFNGLGENTEXTURESPROC)(GLsizei n, GLuint* textures);
typedef GLboolean (*PFNGLISTEXTUREPROC)(GLuint texture);
typedef void (*PFNGLARRAYELEMENTPROC)(GLint i);
typedef void (*PFNGLCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
typedef void (*PFNGLDISABLECLIENTSTATEPROC)(GLenum array);
typedef void (*PFNGLEDGEFLAGPOINTERPROC)(GLsizei stride, const void* pointer);
typedef void (*PFNGLENABLECLIENTSTATEPROC)(GLenum array);
typedef void (*PFNGLINDEXPOINTERPROC)(GLenum type, GLsizei stride, const void* pointer);
typedef void (*PFNGLINTERLEAVEDARRAYSPROC)(GLenum format, GLsizei stride, const void* pointer);
typedef void (*PFNGLNORMALPOINTERPROC)(GLenum type, GLsizei stride, const void* pointer);
typedef void (*PFNGLTEXCOORDPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
typedef void (*PFNGLVERTEXPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
typedef GLboolean (*PFNGLARETEXTURESRESIDENTPROC)(GLsizei n, const GLuint* textures, GLboolean* residences);
typedef void (*PFNGLPRIORITIZETEXTURESPROC)(GLsizei n, const GLuint* textures, const GLfloat* priorities);
typedef void (*PFNGLINDEXUBPROC)(GLubyte c);
typedef void (*PFNGLINDEXUBVPROC)(const GLubyte* c);
typedef void (*PFNGLPOPCLIENTATTRIBPROC)();
typedef void (*PFNGLPUSHCLIENTATTRIBPROC)(GLbitfield mask);
typedef void (*PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices);
typedef void (*PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels);
typedef void (*PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
typedef void (*PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (*PFNGLACTIVETEXTUREPROC)(GLenum texture);
typedef void (*PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
typedef void (*PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data);
typedef void (*PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);
typedef void (*PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data);
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
typedef void (*PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
typedef void (*PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void* img);
typedef void (*PFNGLCLIENTACTIVETEXTUREPROC)(GLenum texture);
typedef void (*PFNGLMULTITEXCOORD1DPROC)(GLenum target, GLdouble s);
typedef void (*PFNGLMULTITEXCOORD1DVPROC)(GLenum target, const GLdouble* v);
typedef void (*PFNGLMULTITEXCOORD1FPROC)(GLenum target, GLfloat s);
typedef void (*PFNGLMULTITEXCOORD1FVPROC)(GLenum target, const GLfloat* v);
typedef void (*PFNGLMULTITEXCOORD1IPROC)(GLenum target, GLint s);
typedef void (*PFNGLMULTITEXCOORD1IVPROC)(GLenum target, const GLint* v);
typedef void (*PFNGLMULTITEXCOORD1SPROC)(GLenum target, GLshort s);
typedef void (*PFNGLMULTITEXCOORD1SVPROC)(GLenum target, const GLshort* v);
typedef void (*PFNGLMULTITEXCOORD2DPROC)(GLenum target, GLdouble s, GLdouble t);
typedef void (*PFNGLMULTITEXCOORD2DVPROC)(GLenum target, const GLdouble* v);
typedef void (*PFNGLMULTITEXCOORD2FPROC)(GLenum target, GLfloat s, GLfloat t);
typedef void (*PFNGLMULTITEXCOORD2FVPROC)(GLenum target, const GLfloat* v);
typedef void (*PFNGLMULTITEXCOORD2IPROC)(GLenum target, GLint s, GLint t);
typedef void (*PFNGLMULTITEXCOORD2IVPROC)(GLenum target, const GLint* v);
typedef void (*PFNGLMULTITEXCOORD2SPROC)(GLenum target, GLshort s, GLshort t);
typedef void (*PFNGLMULTITEXCOORD2SVPROC)(GLenum target, const GLshort* v);
typedef void (*PFNGLMULTITEXCOORD3DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (*PFNGLMULTITEXCOORD3DVPROC)(GLenum target, const GLdouble* v);
typedef void (*PFNGLMULTITEXCOORD3FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (*PFNGLMULTITEXCOORD3FVPROC)(GLenum target, const GLfloat* v);
typedef void (*PFNGLMULTITEXCOORD3IPROC)(GLenum target, GLint s, GLint t, GLint r);
typedef void (*PFNGLMULTITEXCOORD3IVPROC)(GLenum target, const GLint* v);
typedef void (*PFNGLMULTITEXCOORD3SPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (*PFNGLMULTITEXCOORD3SVPROC)(GLenum target, const GLshort* v);
typedef void (*PFNGLMULTITEXCOORD4DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (*PFNGLMULTITEXCOORD4DVPROC)(GLenum target, const GLdouble* v);
typedef void (*PFNGLMULTITEXCOORD4FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (*PFNGLMULTITEXCOORD4FVPROC)(GLenum target, const GLfloat* v);
typedef void (*PFNGLMULTITEXCOORD4IPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (*PFNGLMULTITEXCOORD4IVPROC)(GLenum target, const GLint* v);
typedef void (*PFNGLMULTITEXCOORD4SPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (*PFNGLMULTITEXCOORD4SVPROC)(GLenum target, const GLshort* v);
typedef void (*PFNGLLOADTRANSPOSEMATRIXFPROC)(const GLfloat* m);
typedef void (*PFNGLLOADTRANSPOSEMATRIXDPROC)(const GLdouble* m);
typedef void (*PFNGLMULTTRANSPOSEMATRIXFPROC)(const GLfloat* m);
typedef void (*PFNGLMULTTRANSPOSEMATRIXDPROC)(const GLdouble* m);
typedef void (*PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (*PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint* first, const GLsizei* count, GLsizei drawcount);
typedef void (*PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei* count, GLenum type, const void** indices, GLsizei drawcount);
typedef void (*PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
typedef void (*PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat* params);
typedef void (*PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
typedef void (*PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint* params);
typedef void (*PFNGLFOGCOORDFPROC)(GLfloat coord);
typedef void (*PFNGLFOGCOORDFVPROC)(const GLfloat* coord);
typedef void (*PFNGLFOGCOORDDPROC)(GLdouble coord);
typedef void (*PFNGLFOGCOORDDVPROC)(const GLdouble* coord);
typedef void (*PFNGLFOGCOORDPOINTERPROC)(GLenum type, GLsizei stride, const void* pointer);
typedef void (*PFNGLSECONDARYCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void (*PFNGLSECONDARYCOLOR3BVPROC)(const GLbyte* v);
typedef void (*PFNGLSECONDARYCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void (*PFNGLSECONDARYCOLOR3DVPROC)(const GLdouble* v);
typedef void (*PFNGLSECONDARYCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void (*PFNGLSECONDARYCOLOR3FVPROC)(const GLfloat* v);
typedef void (*PFNGLSECONDARYCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void (*PFNGLSECONDARYCOLOR3IVPROC)(const GLint* v);
typedef void (*PFNGLSECONDARYCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void (*PFNGLSECONDARYCOLOR3SVPROC)(const GLshort* v);
typedef void (*PFNGLSECONDARYCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void (*PFNGLSECONDARYCOLOR3UBVPROC)(const GLubyte* v);
typedef void (*PFNGLSECONDARYCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void (*PFNGLSECONDARYCOLOR3UIVPROC)(const GLuint* v);
typedef void (*PFNGLSECONDARYCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void (*PFNGLSECONDARYCOLOR3USVPROC)(const GLushort* v);
typedef void (*PFNGLSECONDARYCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
typedef void (*PFNGLWINDOWPOS2DPROC)(GLdouble x, GLdouble y);
typedef void (*PFNGLWINDOWPOS2DVPROC)(const GLdouble* v);
typedef void (*PFNGLWINDOWPOS2FPROC)(GLfloat x, GLfloat y);
typedef void (*PFNGLWINDOWPOS2FVPROC)(const GLfloat* v);
typedef void (*PFNGLWINDOWPOS2IPROC)(GLint x, GLint y);
typedef void (*PFNGLWINDOWPOS2IVPROC)(const GLint* v);
typedef void (*PFNGLWINDOWPOS2SPROC)(GLshort x, GLshort y);
typedef void (*PFNGLWINDOWPOS2SVPROC)(const GLshort* v);
typedef void (*PFNGLWINDOWPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (*PFNGLWINDOWPOS3DVPROC)(const GLdouble* v);
typedef void (*PFNGLWINDOWPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLWINDOWPOS3FVPROC)(const GLfloat* v);
typedef void (*PFNGLWINDOWPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void (*PFNGLWINDOWPOS3IVPROC)(const GLint* v);
typedef void (*PFNGLWINDOWPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (*PFNGLWINDOWPOS3SVPROC)(const GLshort* v);
typedef void (*PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (*PFNGLBLENDEQUATIONPROC)(GLenum mode);
typedef void (*PFNGLGENQUERIESPROC)(GLsizei n, GLuint* ids);
typedef void (*PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint* ids);
typedef GLboolean (*PFNGLISQUERYPROC)(GLuint id);
typedef void (*PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
typedef void (*PFNGLENDQUERYPROC)(GLenum target);
typedef void (*PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef void (*PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint* params);
typedef void (*PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint* params);
typedef void (*PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
typedef void (*PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint* buffers);
typedef void (*PFNGLGENBUFFERSPROC)(GLsizei n, GLuint* buffers);
typedef GLboolean (*PFNGLISBUFFERPROC)(GLuint buffer);
typedef void (*PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void* data, GLenum usage);
typedef void (*PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void* data);
typedef void (*PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void* data);
typedef void* (*PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
typedef GLboolean (*PFNGLUNMAPBUFFERPROC)(GLenum target);
typedef void (*PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef void (*PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void** params);
typedef void (*PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (*PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum* bufs);
typedef void (*PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (*PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void (*PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
typedef void (*PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (*PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar* name);
typedef void (*PFNGLCOMPILESHADERPROC)(GLuint shader);
typedef GLuint (*PFNGLCREATEPROGRAMPROC)();
typedef GLuint (*PFNGLCREATESHADERPROC)(GLenum type);
typedef void (*PFNGLDELETEPROGRAMPROC)(GLuint program);
typedef void (*PFNGLDELETESHADERPROC)(GLuint shader);
typedef void (*PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (*PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (*PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (*PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
typedef void (*PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
typedef void (*PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
typedef GLint (*PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar* name);
typedef void (*PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint* params);
typedef void (*PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
typedef void (*PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint* params);
typedef void (*PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
typedef void (*PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source);
typedef GLint (*PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar* name);
typedef void (*PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat* params);
typedef void (*PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint* params);
typedef void (*PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble* params);
typedef void (*PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat* params);
typedef void (*PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint* params);
typedef void (*PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void** pointer);
typedef GLboolean (*PFNGLISPROGRAMPROC)(GLuint program);
typedef GLboolean (*PFNGLISSHADERPROC)(GLuint shader);
typedef void (*PFNGLLINKPROGRAMPROC)(GLuint program);
typedef void (*PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar** string, const GLint* length);
typedef void (*PFNGLUSEPROGRAMPROC)(GLuint program);
typedef void (*PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
typedef void (*PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void (*PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (*PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (*PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
typedef void (*PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
typedef void (*PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void (*PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (*PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat* value);
typedef void (*PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat* value);
typedef void (*PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat* value);
typedef void (*PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat* value);
typedef void (*PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint* value);
typedef void (*PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint* value);
typedef void (*PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint* value);
typedef void (*PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint* value);
typedef void (*PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (*PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (*PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void (*PFNGLVALIDATEPROGRAMPROC)(GLuint program);
typedef void (*PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
typedef void (*PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble* v);
typedef void (*PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
typedef void (*PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat* v);
typedef void (*PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
typedef void (*PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort* v);
typedef void (*PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (*PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble* v);
typedef void (*PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (*PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat* v);
typedef void (*PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
typedef void (*PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort* v);
typedef void (*PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (*PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble* v);
typedef void (*PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (*PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat* v);
typedef void (*PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (*PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort* v);
typedef void (*PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte* v);
typedef void (*PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint* v);
typedef void (*PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort* v);
typedef void (*PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (*PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte* v);
typedef void (*PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint* v);
typedef void (*PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort* v);
typedef void (*PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte* v);
typedef void (*PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (*PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble* v);
typedef void (*PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (*PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat* v);
typedef void (*PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint* v);
typedef void (*PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (*PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort* v);
typedef void (*PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte* v);
typedef void (*PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint* v);
typedef void (*PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort* v);
typedef void (*PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);
typedef void (*PFNGLBINDBUFFERARBPROC)(GLenum target, GLuint buffer);
typedef void (*PFNGLDELETEBUFFERSARBPROC)(GLsizei n, const GLuint* buffers);
typedef void (*PFNGLGENBUFFERSARBPROC)(GLsizei n, GLuint* buffers);
typedef GLboolean (*PFNGLISBUFFERARBPROC)(GLuint buffer);
typedef void (*PFNGLBUFFERDATAARBPROC)(GLenum target, GLsizeiptrARB size, const void* data, GLenum usage);
typedef void (*PFNGLBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void* data);
typedef void (*PFNGLGETBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void* data);
typedef void* (*PFNGLMAPBUFFERARBPROC)(GLenum target, GLenum access);
typedef GLboolean (*PFNGLUNMAPBUFFERARBPROC)(GLenum target);
typedef void (*PFNGLGETBUFFERPARAMETERIVARBPROC)(GLenum target, GLenum pname, GLint* params);
typedef void (*PFNGLGETBUFFERPOINTERVARBPROC)(GLenum target, GLenum pname, void** params);
typedef void (*PFNGLBINDVERTEXARRAYPROC)(GLuint array);
typedef void (*PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint* arrays);
typedef void (*PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint* arrays);
typedef GLboolean (*PFNGLISVERTEXARRAYPROC)(GLuint array);
typedef GLboolean (*PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
typedef void (*PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
typedef void (*PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint* renderbuffers);
typedef void (*PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint* renderbuffers);
typedef void (*PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (*PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef GLboolean (*PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
typedef void (*PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
typedef void (*PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint* framebuffers);
typedef void (*PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint* framebuffers);
typedef GLenum (*PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
typedef void (*PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (*PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (*PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (*PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (*PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint* params);
typedef void (*PFNGLGENERATEMIPMAPPROC)(GLenum target);
typedef void (*PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (*PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (*PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef GLboolean (*PFNGLISRENDERBUFFEREXTPROC)(GLuint renderbuffer);
typedef void (*PFNGLBINDRENDERBUFFEREXTPROC)(GLenum target, GLuint renderbuffer);
typedef void (*PFNGLDELETERENDERBUFFERSEXTPROC)(GLsizei n, const GLuint* renderbuffers);
typedef void (*PFNGLGENRENDERBUFFERSEXTPROC)(GLsizei n, GLuint* renderbuffers);
typedef void (*PFNGLRENDERBUFFERSTORAGEEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (*PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint* params);
typedef GLboolean (*PFNGLISFRAMEBUFFEREXTPROC)(GLuint framebuffer);
typedef void (*PFNGLBINDFRAMEBUFFEREXTPROC)(GLenum target, GLuint framebuffer);
typedef void (*PFNGLDELETEFRAMEBUFFERSEXTPROC)(GLsizei n, const GLuint* framebuffers);
typedef void (*PFNGLGENFRAMEBUFFERSEXTPROC)(GLsizei n, GLuint* framebuffers);
typedef GLenum (*PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)(GLenum target);
typedef void (*PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (*PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (*PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (*PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (*PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)(GLenum target, GLenum attachment, GLenum pname, GLint* params);
typedef void (*PFNGLGENERATEMIPMAPEXTPROC)(GLenum target);
typedef void (*PFNGLBINDVERTEXARRAYAPPLEPROC)(GLuint array);
typedef void (*PFNGLDELETEVERTEXARRAYSAPPLEPROC)(GLsizei n, const GLuint* arrays);
typedef void (*PFNGLGENVERTEXARRAYSAPPLEPROC)(GLsizei n, GLuint* arrays);
typedef GLboolean (*PFNGLISVERTEXARRAYAPPLEPROC)(GLuint array);



namespace OFX {

template <bool USEOPENGL>
class OSGLFunctions
{





    static OSGLFunctions<USEOPENGL>& getInstance() {
        static OSGLFunctions<USEOPENGL> instance;
        return instance;
    }

    void load_functions();

    OSGLFunctions() { load_functions(); } 

    PFNGLCULLFACEPROC _mglCullFace;
    PFNGLFRONTFACEPROC _mglFrontFace;
    PFNGLHINTPROC _mglHint;
    PFNGLLINEWIDTHPROC _mglLineWidth;
    PFNGLPOINTSIZEPROC _mglPointSize;
    PFNGLPOLYGONMODEPROC _mglPolygonMode;
    PFNGLSCISSORPROC _mglScissor;
    PFNGLTEXPARAMETERFPROC _mglTexParameterf;
    PFNGLTEXPARAMETERFVPROC _mglTexParameterfv;
    PFNGLTEXPARAMETERIPROC _mglTexParameteri;
    PFNGLTEXPARAMETERIVPROC _mglTexParameteriv;
    PFNGLTEXIMAGE1DPROC _mglTexImage1D;
    PFNGLTEXIMAGE2DPROC _mglTexImage2D;
    PFNGLDRAWBUFFERPROC _mglDrawBuffer;
    PFNGLCLEARPROC _mglClear;
    PFNGLCLEARCOLORPROC _mglClearColor;
    PFNGLCLEARSTENCILPROC _mglClearStencil;
    PFNGLCLEARDEPTHPROC _mglClearDepth;
    PFNGLSTENCILMASKPROC _mglStencilMask;
    PFNGLCOLORMASKPROC _mglColorMask;
    PFNGLDEPTHMASKPROC _mglDepthMask;
    PFNGLDISABLEPROC _mglDisable;
    PFNGLENABLEPROC _mglEnable;
    PFNGLFINISHPROC _mglFinish;
    PFNGLFLUSHPROC _mglFlush;
    PFNGLBLENDFUNCPROC _mglBlendFunc;
    PFNGLLOGICOPPROC _mglLogicOp;
    PFNGLSTENCILFUNCPROC _mglStencilFunc;
    PFNGLSTENCILOPPROC _mglStencilOp;
    PFNGLDEPTHFUNCPROC _mglDepthFunc;
    PFNGLPIXELSTOREFPROC _mglPixelStoref;
    PFNGLPIXELSTOREIPROC _mglPixelStorei;
    PFNGLREADBUFFERPROC _mglReadBuffer;
    PFNGLREADPIXELSPROC _mglReadPixels;
    PFNGLGETBOOLEANVPROC _mglGetBooleanv;
    PFNGLGETDOUBLEVPROC _mglGetDoublev;
    PFNGLGETERRORPROC _mglGetError;
    PFNGLGETFLOATVPROC _mglGetFloatv;
    PFNGLGETINTEGERVPROC _mglGetIntegerv;
    PFNGLGETSTRINGPROC _mglGetString;
    PFNGLGETTEXIMAGEPROC _mglGetTexImage;
    PFNGLGETTEXPARAMETERFVPROC _mglGetTexParameterfv;
    PFNGLGETTEXPARAMETERIVPROC _mglGetTexParameteriv;
    PFNGLGETTEXLEVELPARAMETERFVPROC _mglGetTexLevelParameterfv;
    PFNGLGETTEXLEVELPARAMETERIVPROC _mglGetTexLevelParameteriv;
    PFNGLISENABLEDPROC _mglIsEnabled;
    PFNGLDEPTHRANGEPROC _mglDepthRange;
    PFNGLVIEWPORTPROC _mglViewport;
    PFNGLNEWLISTPROC _mglNewList;
    PFNGLENDLISTPROC _mglEndList;
    PFNGLCALLLISTPROC _mglCallList;
    PFNGLCALLLISTSPROC _mglCallLists;
    PFNGLDELETELISTSPROC _mglDeleteLists;
    PFNGLGENLISTSPROC _mglGenLists;
    PFNGLLISTBASEPROC _mglListBase;
    PFNGLBEGINPROC _mglBegin;
    PFNGLBITMAPPROC _mglBitmap;
    PFNGLCOLOR3BPROC _mglColor3b;
    PFNGLCOLOR3BVPROC _mglColor3bv;
    PFNGLCOLOR3DPROC _mglColor3d;
    PFNGLCOLOR3DVPROC _mglColor3dv;
    PFNGLCOLOR3FPROC _mglColor3f;
    PFNGLCOLOR3FVPROC _mglColor3fv;
    PFNGLCOLOR3IPROC _mglColor3i;
    PFNGLCOLOR3IVPROC _mglColor3iv;
    PFNGLCOLOR3SPROC _mglColor3s;
    PFNGLCOLOR3SVPROC _mglColor3sv;
    PFNGLCOLOR3UBPROC _mglColor3ub;
    PFNGLCOLOR3UBVPROC _mglColor3ubv;
    PFNGLCOLOR3UIPROC _mglColor3ui;
    PFNGLCOLOR3UIVPROC _mglColor3uiv;
    PFNGLCOLOR3USPROC _mglColor3us;
    PFNGLCOLOR3USVPROC _mglColor3usv;
    PFNGLCOLOR4BPROC _mglColor4b;
    PFNGLCOLOR4BVPROC _mglColor4bv;
    PFNGLCOLOR4DPROC _mglColor4d;
    PFNGLCOLOR4DVPROC _mglColor4dv;
    PFNGLCOLOR4FPROC _mglColor4f;
    PFNGLCOLOR4FVPROC _mglColor4fv;
    PFNGLCOLOR4IPROC _mglColor4i;
    PFNGLCOLOR4IVPROC _mglColor4iv;
    PFNGLCOLOR4SPROC _mglColor4s;
    PFNGLCOLOR4SVPROC _mglColor4sv;
    PFNGLCOLOR4UBPROC _mglColor4ub;
    PFNGLCOLOR4UBVPROC _mglColor4ubv;
    PFNGLCOLOR4UIPROC _mglColor4ui;
    PFNGLCOLOR4UIVPROC _mglColor4uiv;
    PFNGLCOLOR4USPROC _mglColor4us;
    PFNGLCOLOR4USVPROC _mglColor4usv;
    PFNGLEDGEFLAGPROC _mglEdgeFlag;
    PFNGLEDGEFLAGVPROC _mglEdgeFlagv;
    PFNGLENDPROC _mglEnd;
    PFNGLINDEXDPROC _mglIndexd;
    PFNGLINDEXDVPROC _mglIndexdv;
    PFNGLINDEXFPROC _mglIndexf;
    PFNGLINDEXFVPROC _mglIndexfv;
    PFNGLINDEXIPROC _mglIndexi;
    PFNGLINDEXIVPROC _mglIndexiv;
    PFNGLINDEXSPROC _mglIndexs;
    PFNGLINDEXSVPROC _mglIndexsv;
    PFNGLNORMAL3BPROC _mglNormal3b;
    PFNGLNORMAL3BVPROC _mglNormal3bv;
    PFNGLNORMAL3DPROC _mglNormal3d;
    PFNGLNORMAL3DVPROC _mglNormal3dv;
    PFNGLNORMAL3FPROC _mglNormal3f;
    PFNGLNORMAL3FVPROC _mglNormal3fv;
    PFNGLNORMAL3IPROC _mglNormal3i;
    PFNGLNORMAL3IVPROC _mglNormal3iv;
    PFNGLNORMAL3SPROC _mglNormal3s;
    PFNGLNORMAL3SVPROC _mglNormal3sv;
    PFNGLRASTERPOS2DPROC _mglRasterPos2d;
    PFNGLRASTERPOS2DVPROC _mglRasterPos2dv;
    PFNGLRASTERPOS2FPROC _mglRasterPos2f;
    PFNGLRASTERPOS2FVPROC _mglRasterPos2fv;
    PFNGLRASTERPOS2IPROC _mglRasterPos2i;
    PFNGLRASTERPOS2IVPROC _mglRasterPos2iv;
    PFNGLRASTERPOS2SPROC _mglRasterPos2s;
    PFNGLRASTERPOS2SVPROC _mglRasterPos2sv;
    PFNGLRASTERPOS3DPROC _mglRasterPos3d;
    PFNGLRASTERPOS3DVPROC _mglRasterPos3dv;
    PFNGLRASTERPOS3FPROC _mglRasterPos3f;
    PFNGLRASTERPOS3FVPROC _mglRasterPos3fv;
    PFNGLRASTERPOS3IPROC _mglRasterPos3i;
    PFNGLRASTERPOS3IVPROC _mglRasterPos3iv;
    PFNGLRASTERPOS3SPROC _mglRasterPos3s;
    PFNGLRASTERPOS3SVPROC _mglRasterPos3sv;
    PFNGLRASTERPOS4DPROC _mglRasterPos4d;
    PFNGLRASTERPOS4DVPROC _mglRasterPos4dv;
    PFNGLRASTERPOS4FPROC _mglRasterPos4f;
    PFNGLRASTERPOS4FVPROC _mglRasterPos4fv;
    PFNGLRASTERPOS4IPROC _mglRasterPos4i;
    PFNGLRASTERPOS4IVPROC _mglRasterPos4iv;
    PFNGLRASTERPOS4SPROC _mglRasterPos4s;
    PFNGLRASTERPOS4SVPROC _mglRasterPos4sv;
    PFNGLRECTDPROC _mglRectd;
    PFNGLRECTDVPROC _mglRectdv;
    PFNGLRECTFPROC _mglRectf;
    PFNGLRECTFVPROC _mglRectfv;
    PFNGLRECTIPROC _mglRecti;
    PFNGLRECTIVPROC _mglRectiv;
    PFNGLRECTSPROC _mglRects;
    PFNGLRECTSVPROC _mglRectsv;
    PFNGLTEXCOORD1DPROC _mglTexCoord1d;
    PFNGLTEXCOORD1DVPROC _mglTexCoord1dv;
    PFNGLTEXCOORD1FPROC _mglTexCoord1f;
    PFNGLTEXCOORD1FVPROC _mglTexCoord1fv;
    PFNGLTEXCOORD1IPROC _mglTexCoord1i;
    PFNGLTEXCOORD1IVPROC _mglTexCoord1iv;
    PFNGLTEXCOORD1SPROC _mglTexCoord1s;
    PFNGLTEXCOORD1SVPROC _mglTexCoord1sv;
    PFNGLTEXCOORD2DPROC _mglTexCoord2d;
    PFNGLTEXCOORD2DVPROC _mglTexCoord2dv;
    PFNGLTEXCOORD2FPROC _mglTexCoord2f;
    PFNGLTEXCOORD2FVPROC _mglTexCoord2fv;
    PFNGLTEXCOORD2IPROC _mglTexCoord2i;
    PFNGLTEXCOORD2IVPROC _mglTexCoord2iv;
    PFNGLTEXCOORD2SPROC _mglTexCoord2s;
    PFNGLTEXCOORD2SVPROC _mglTexCoord2sv;
    PFNGLTEXCOORD3DPROC _mglTexCoord3d;
    PFNGLTEXCOORD3DVPROC _mglTexCoord3dv;
    PFNGLTEXCOORD3FPROC _mglTexCoord3f;
    PFNGLTEXCOORD3FVPROC _mglTexCoord3fv;
    PFNGLTEXCOORD3IPROC _mglTexCoord3i;
    PFNGLTEXCOORD3IVPROC _mglTexCoord3iv;
    PFNGLTEXCOORD3SPROC _mglTexCoord3s;
    PFNGLTEXCOORD3SVPROC _mglTexCoord3sv;
    PFNGLTEXCOORD4DPROC _mglTexCoord4d;
    PFNGLTEXCOORD4DVPROC _mglTexCoord4dv;
    PFNGLTEXCOORD4FPROC _mglTexCoord4f;
    PFNGLTEXCOORD4FVPROC _mglTexCoord4fv;
    PFNGLTEXCOORD4IPROC _mglTexCoord4i;
    PFNGLTEXCOORD4IVPROC _mglTexCoord4iv;
    PFNGLTEXCOORD4SPROC _mglTexCoord4s;
    PFNGLTEXCOORD4SVPROC _mglTexCoord4sv;
    PFNGLVERTEX2DPROC _mglVertex2d;
    PFNGLVERTEX2DVPROC _mglVertex2dv;
    PFNGLVERTEX2FPROC _mglVertex2f;
    PFNGLVERTEX2FVPROC _mglVertex2fv;
    PFNGLVERTEX2IPROC _mglVertex2i;
    PFNGLVERTEX2IVPROC _mglVertex2iv;
    PFNGLVERTEX2SPROC _mglVertex2s;
    PFNGLVERTEX2SVPROC _mglVertex2sv;
    PFNGLVERTEX3DPROC _mglVertex3d;
    PFNGLVERTEX3DVPROC _mglVertex3dv;
    PFNGLVERTEX3FPROC _mglVertex3f;
    PFNGLVERTEX3FVPROC _mglVertex3fv;
    PFNGLVERTEX3IPROC _mglVertex3i;
    PFNGLVERTEX3IVPROC _mglVertex3iv;
    PFNGLVERTEX3SPROC _mglVertex3s;
    PFNGLVERTEX3SVPROC _mglVertex3sv;
    PFNGLVERTEX4DPROC _mglVertex4d;
    PFNGLVERTEX4DVPROC _mglVertex4dv;
    PFNGLVERTEX4FPROC _mglVertex4f;
    PFNGLVERTEX4FVPROC _mglVertex4fv;
    PFNGLVERTEX4IPROC _mglVertex4i;
    PFNGLVERTEX4IVPROC _mglVertex4iv;
    PFNGLVERTEX4SPROC _mglVertex4s;
    PFNGLVERTEX4SVPROC _mglVertex4sv;
    PFNGLCLIPPLANEPROC _mglClipPlane;
    PFNGLCOLORMATERIALPROC _mglColorMaterial;
    PFNGLFOGFPROC _mglFogf;
    PFNGLFOGFVPROC _mglFogfv;
    PFNGLFOGIPROC _mglFogi;
    PFNGLFOGIVPROC _mglFogiv;
    PFNGLLIGHTFPROC _mglLightf;
    PFNGLLIGHTFVPROC _mglLightfv;
    PFNGLLIGHTIPROC _mglLighti;
    PFNGLLIGHTIVPROC _mglLightiv;
    PFNGLLIGHTMODELFPROC _mglLightModelf;
    PFNGLLIGHTMODELFVPROC _mglLightModelfv;
    PFNGLLIGHTMODELIPROC _mglLightModeli;
    PFNGLLIGHTMODELIVPROC _mglLightModeliv;
    PFNGLLINESTIPPLEPROC _mglLineStipple;
    PFNGLMATERIALFPROC _mglMaterialf;
    PFNGLMATERIALFVPROC _mglMaterialfv;
    PFNGLMATERIALIPROC _mglMateriali;
    PFNGLMATERIALIVPROC _mglMaterialiv;
    PFNGLPOLYGONSTIPPLEPROC _mglPolygonStipple;
    PFNGLSHADEMODELPROC _mglShadeModel;
    PFNGLTEXENVFPROC _mglTexEnvf;
    PFNGLTEXENVFVPROC _mglTexEnvfv;
    PFNGLTEXENVIPROC _mglTexEnvi;
    PFNGLTEXENVIVPROC _mglTexEnviv;
    PFNGLTEXGENDPROC _mglTexGend;
    PFNGLTEXGENDVPROC _mglTexGendv;
    PFNGLTEXGENFPROC _mglTexGenf;
    PFNGLTEXGENFVPROC _mglTexGenfv;
    PFNGLTEXGENIPROC _mglTexGeni;
    PFNGLTEXGENIVPROC _mglTexGeniv;
    PFNGLFEEDBACKBUFFERPROC _mglFeedbackBuffer;
    PFNGLSELECTBUFFERPROC _mglSelectBuffer;
    PFNGLRENDERMODEPROC _mglRenderMode;
    PFNGLINITNAMESPROC _mglInitNames;
    PFNGLLOADNAMEPROC _mglLoadName;
    PFNGLPASSTHROUGHPROC _mglPassThrough;
    PFNGLPOPNAMEPROC _mglPopName;
    PFNGLPUSHNAMEPROC _mglPushName;
    PFNGLCLEARACCUMPROC _mglClearAccum;
    PFNGLCLEARINDEXPROC _mglClearIndex;
    PFNGLINDEXMASKPROC _mglIndexMask;
    PFNGLACCUMPROC _mglAccum;
    PFNGLPOPATTRIBPROC _mglPopAttrib;
    PFNGLPUSHATTRIBPROC _mglPushAttrib;
    PFNGLMAP1DPROC _mglMap1d;
    PFNGLMAP1FPROC _mglMap1f;
    PFNGLMAP2DPROC _mglMap2d;
    PFNGLMAP2FPROC _mglMap2f;
    PFNGLMAPGRID1DPROC _mglMapGrid1d;
    PFNGLMAPGRID1FPROC _mglMapGrid1f;
    PFNGLMAPGRID2DPROC _mglMapGrid2d;
    PFNGLMAPGRID2FPROC _mglMapGrid2f;
    PFNGLEVALCOORD1DPROC _mglEvalCoord1d;
    PFNGLEVALCOORD1DVPROC _mglEvalCoord1dv;
    PFNGLEVALCOORD1FPROC _mglEvalCoord1f;
    PFNGLEVALCOORD1FVPROC _mglEvalCoord1fv;
    PFNGLEVALCOORD2DPROC _mglEvalCoord2d;
    PFNGLEVALCOORD2DVPROC _mglEvalCoord2dv;
    PFNGLEVALCOORD2FPROC _mglEvalCoord2f;
    PFNGLEVALCOORD2FVPROC _mglEvalCoord2fv;
    PFNGLEVALMESH1PROC _mglEvalMesh1;
    PFNGLEVALPOINT1PROC _mglEvalPoint1;
    PFNGLEVALMESH2PROC _mglEvalMesh2;
    PFNGLEVALPOINT2PROC _mglEvalPoint2;
    PFNGLALPHAFUNCPROC _mglAlphaFunc;
    PFNGLPIXELZOOMPROC _mglPixelZoom;
    PFNGLPIXELTRANSFERFPROC _mglPixelTransferf;
    PFNGLPIXELTRANSFERIPROC _mglPixelTransferi;
    PFNGLPIXELMAPFVPROC _mglPixelMapfv;
    PFNGLPIXELMAPUIVPROC _mglPixelMapuiv;
    PFNGLPIXELMAPUSVPROC _mglPixelMapusv;
    PFNGLCOPYPIXELSPROC _mglCopyPixels;
    PFNGLDRAWPIXELSPROC _mglDrawPixels;
    PFNGLGETCLIPPLANEPROC _mglGetClipPlane;
    PFNGLGETLIGHTFVPROC _mglGetLightfv;
    PFNGLGETLIGHTIVPROC _mglGetLightiv;
    PFNGLGETMAPDVPROC _mglGetMapdv;
    PFNGLGETMAPFVPROC _mglGetMapfv;
    PFNGLGETMAPIVPROC _mglGetMapiv;
    PFNGLGETMATERIALFVPROC _mglGetMaterialfv;
    PFNGLGETMATERIALIVPROC _mglGetMaterialiv;
    PFNGLGETPIXELMAPFVPROC _mglGetPixelMapfv;
    PFNGLGETPIXELMAPUIVPROC _mglGetPixelMapuiv;
    PFNGLGETPIXELMAPUSVPROC _mglGetPixelMapusv;
    PFNGLGETPOLYGONSTIPPLEPROC _mglGetPolygonStipple;
    PFNGLGETTEXENVFVPROC _mglGetTexEnvfv;
    PFNGLGETTEXENVIVPROC _mglGetTexEnviv;
    PFNGLGETTEXGENDVPROC _mglGetTexGendv;
    PFNGLGETTEXGENFVPROC _mglGetTexGenfv;
    PFNGLGETTEXGENIVPROC _mglGetTexGeniv;
    PFNGLISLISTPROC _mglIsList;
    PFNGLFRUSTUMPROC _mglFrustum;
    PFNGLLOADIDENTITYPROC _mglLoadIdentity;
    PFNGLLOADMATRIXFPROC _mglLoadMatrixf;
    PFNGLLOADMATRIXDPROC _mglLoadMatrixd;
    PFNGLMATRIXMODEPROC _mglMatrixMode;
    PFNGLMULTMATRIXFPROC _mglMultMatrixf;
    PFNGLMULTMATRIXDPROC _mglMultMatrixd;
    PFNGLORTHOPROC _mglOrtho;
    PFNGLPOPMATRIXPROC _mglPopMatrix;
    PFNGLPUSHMATRIXPROC _mglPushMatrix;
    PFNGLROTATEDPROC _mglRotated;
    PFNGLROTATEFPROC _mglRotatef;
    PFNGLSCALEDPROC _mglScaled;
    PFNGLSCALEFPROC _mglScalef;
    PFNGLTRANSLATEDPROC _mglTranslated;
    PFNGLTRANSLATEFPROC _mglTranslatef;
    PFNGLDRAWARRAYSPROC _mglDrawArrays;
    PFNGLDRAWELEMENTSPROC _mglDrawElements;
    PFNGLGETPOINTERVPROC _mglGetPointerv;
    PFNGLPOLYGONOFFSETPROC _mglPolygonOffset;
    PFNGLCOPYTEXIMAGE1DPROC _mglCopyTexImage1D;
    PFNGLCOPYTEXIMAGE2DPROC _mglCopyTexImage2D;
    PFNGLCOPYTEXSUBIMAGE1DPROC _mglCopyTexSubImage1D;
    PFNGLCOPYTEXSUBIMAGE2DPROC _mglCopyTexSubImage2D;
    PFNGLTEXSUBIMAGE1DPROC _mglTexSubImage1D;
    PFNGLTEXSUBIMAGE2DPROC _mglTexSubImage2D;
    PFNGLBINDTEXTUREPROC _mglBindTexture;
    PFNGLDELETETEXTURESPROC _mglDeleteTextures;
    PFNGLGENTEXTURESPROC _mglGenTextures;
    PFNGLISTEXTUREPROC _mglIsTexture;
    PFNGLARRAYELEMENTPROC _mglArrayElement;
    PFNGLCOLORPOINTERPROC _mglColorPointer;
    PFNGLDISABLECLIENTSTATEPROC _mglDisableClientState;
    PFNGLEDGEFLAGPOINTERPROC _mglEdgeFlagPointer;
    PFNGLENABLECLIENTSTATEPROC _mglEnableClientState;
    PFNGLINDEXPOINTERPROC _mglIndexPointer;
    PFNGLINTERLEAVEDARRAYSPROC _mglInterleavedArrays;
    PFNGLNORMALPOINTERPROC _mglNormalPointer;
    PFNGLTEXCOORDPOINTERPROC _mglTexCoordPointer;
    PFNGLVERTEXPOINTERPROC _mglVertexPointer;
    PFNGLARETEXTURESRESIDENTPROC _mglAreTexturesResident;
    PFNGLPRIORITIZETEXTURESPROC _mglPrioritizeTextures;
    PFNGLINDEXUBPROC _mglIndexub;
    PFNGLINDEXUBVPROC _mglIndexubv;
    PFNGLPOPCLIENTATTRIBPROC _mglPopClientAttrib;
    PFNGLPUSHCLIENTATTRIBPROC _mglPushClientAttrib;
    PFNGLDRAWRANGEELEMENTSPROC _mglDrawRangeElements;
    PFNGLTEXIMAGE3DPROC _mglTexImage3D;
    PFNGLTEXSUBIMAGE3DPROC _mglTexSubImage3D;
    PFNGLCOPYTEXSUBIMAGE3DPROC _mglCopyTexSubImage3D;
    PFNGLACTIVETEXTUREPROC _mglActiveTexture;
    PFNGLSAMPLECOVERAGEPROC _mglSampleCoverage;
    PFNGLCOMPRESSEDTEXIMAGE3DPROC _mglCompressedTexImage3D;
    PFNGLCOMPRESSEDTEXIMAGE2DPROC _mglCompressedTexImage2D;
    PFNGLCOMPRESSEDTEXIMAGE1DPROC _mglCompressedTexImage1D;
    PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC _mglCompressedTexSubImage3D;
    PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC _mglCompressedTexSubImage2D;
    PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC _mglCompressedTexSubImage1D;
    PFNGLGETCOMPRESSEDTEXIMAGEPROC _mglGetCompressedTexImage;
    PFNGLCLIENTACTIVETEXTUREPROC _mglClientActiveTexture;
    PFNGLMULTITEXCOORD1DPROC _mglMultiTexCoord1d;
    PFNGLMULTITEXCOORD1DVPROC _mglMultiTexCoord1dv;
    PFNGLMULTITEXCOORD1FPROC _mglMultiTexCoord1f;
    PFNGLMULTITEXCOORD1FVPROC _mglMultiTexCoord1fv;
    PFNGLMULTITEXCOORD1IPROC _mglMultiTexCoord1i;
    PFNGLMULTITEXCOORD1IVPROC _mglMultiTexCoord1iv;
    PFNGLMULTITEXCOORD1SPROC _mglMultiTexCoord1s;
    PFNGLMULTITEXCOORD1SVPROC _mglMultiTexCoord1sv;
    PFNGLMULTITEXCOORD2DPROC _mglMultiTexCoord2d;
    PFNGLMULTITEXCOORD2DVPROC _mglMultiTexCoord2dv;
    PFNGLMULTITEXCOORD2FPROC _mglMultiTexCoord2f;
    PFNGLMULTITEXCOORD2FVPROC _mglMultiTexCoord2fv;
    PFNGLMULTITEXCOORD2IPROC _mglMultiTexCoord2i;
    PFNGLMULTITEXCOORD2IVPROC _mglMultiTexCoord2iv;
    PFNGLMULTITEXCOORD2SPROC _mglMultiTexCoord2s;
    PFNGLMULTITEXCOORD2SVPROC _mglMultiTexCoord2sv;
    PFNGLMULTITEXCOORD3DPROC _mglMultiTexCoord3d;
    PFNGLMULTITEXCOORD3DVPROC _mglMultiTexCoord3dv;
    PFNGLMULTITEXCOORD3FPROC _mglMultiTexCoord3f;
    PFNGLMULTITEXCOORD3FVPROC _mglMultiTexCoord3fv;
    PFNGLMULTITEXCOORD3IPROC _mglMultiTexCoord3i;
    PFNGLMULTITEXCOORD3IVPROC _mglMultiTexCoord3iv;
    PFNGLMULTITEXCOORD3SPROC _mglMultiTexCoord3s;
    PFNGLMULTITEXCOORD3SVPROC _mglMultiTexCoord3sv;
    PFNGLMULTITEXCOORD4DPROC _mglMultiTexCoord4d;
    PFNGLMULTITEXCOORD4DVPROC _mglMultiTexCoord4dv;
    PFNGLMULTITEXCOORD4FPROC _mglMultiTexCoord4f;
    PFNGLMULTITEXCOORD4FVPROC _mglMultiTexCoord4fv;
    PFNGLMULTITEXCOORD4IPROC _mglMultiTexCoord4i;
    PFNGLMULTITEXCOORD4IVPROC _mglMultiTexCoord4iv;
    PFNGLMULTITEXCOORD4SPROC _mglMultiTexCoord4s;
    PFNGLMULTITEXCOORD4SVPROC _mglMultiTexCoord4sv;
    PFNGLLOADTRANSPOSEMATRIXFPROC _mglLoadTransposeMatrixf;
    PFNGLLOADTRANSPOSEMATRIXDPROC _mglLoadTransposeMatrixd;
    PFNGLMULTTRANSPOSEMATRIXFPROC _mglMultTransposeMatrixf;
    PFNGLMULTTRANSPOSEMATRIXDPROC _mglMultTransposeMatrixd;
    PFNGLBLENDFUNCSEPARATEPROC _mglBlendFuncSeparate;
    PFNGLMULTIDRAWARRAYSPROC _mglMultiDrawArrays;
    PFNGLMULTIDRAWELEMENTSPROC _mglMultiDrawElements;
    PFNGLPOINTPARAMETERFPROC _mglPointParameterf;
    PFNGLPOINTPARAMETERFVPROC _mglPointParameterfv;
    PFNGLPOINTPARAMETERIPROC _mglPointParameteri;
    PFNGLPOINTPARAMETERIVPROC _mglPointParameteriv;
    PFNGLFOGCOORDFPROC _mglFogCoordf;
    PFNGLFOGCOORDFVPROC _mglFogCoordfv;
    PFNGLFOGCOORDDPROC _mglFogCoordd;
    PFNGLFOGCOORDDVPROC _mglFogCoorddv;
    PFNGLFOGCOORDPOINTERPROC _mglFogCoordPointer;
    PFNGLSECONDARYCOLOR3BPROC _mglSecondaryColor3b;
    PFNGLSECONDARYCOLOR3BVPROC _mglSecondaryColor3bv;
    PFNGLSECONDARYCOLOR3DPROC _mglSecondaryColor3d;
    PFNGLSECONDARYCOLOR3DVPROC _mglSecondaryColor3dv;
    PFNGLSECONDARYCOLOR3FPROC _mglSecondaryColor3f;
    PFNGLSECONDARYCOLOR3FVPROC _mglSecondaryColor3fv;
    PFNGLSECONDARYCOLOR3IPROC _mglSecondaryColor3i;
    PFNGLSECONDARYCOLOR3IVPROC _mglSecondaryColor3iv;
    PFNGLSECONDARYCOLOR3SPROC _mglSecondaryColor3s;
    PFNGLSECONDARYCOLOR3SVPROC _mglSecondaryColor3sv;
    PFNGLSECONDARYCOLOR3UBPROC _mglSecondaryColor3ub;
    PFNGLSECONDARYCOLOR3UBVPROC _mglSecondaryColor3ubv;
    PFNGLSECONDARYCOLOR3UIPROC _mglSecondaryColor3ui;
    PFNGLSECONDARYCOLOR3UIVPROC _mglSecondaryColor3uiv;
    PFNGLSECONDARYCOLOR3USPROC _mglSecondaryColor3us;
    PFNGLSECONDARYCOLOR3USVPROC _mglSecondaryColor3usv;
    PFNGLSECONDARYCOLORPOINTERPROC _mglSecondaryColorPointer;
    PFNGLWINDOWPOS2DPROC _mglWindowPos2d;
    PFNGLWINDOWPOS2DVPROC _mglWindowPos2dv;
    PFNGLWINDOWPOS2FPROC _mglWindowPos2f;
    PFNGLWINDOWPOS2FVPROC _mglWindowPos2fv;
    PFNGLWINDOWPOS2IPROC _mglWindowPos2i;
    PFNGLWINDOWPOS2IVPROC _mglWindowPos2iv;
    PFNGLWINDOWPOS2SPROC _mglWindowPos2s;
    PFNGLWINDOWPOS2SVPROC _mglWindowPos2sv;
    PFNGLWINDOWPOS3DPROC _mglWindowPos3d;
    PFNGLWINDOWPOS3DVPROC _mglWindowPos3dv;
    PFNGLWINDOWPOS3FPROC _mglWindowPos3f;
    PFNGLWINDOWPOS3FVPROC _mglWindowPos3fv;
    PFNGLWINDOWPOS3IPROC _mglWindowPos3i;
    PFNGLWINDOWPOS3IVPROC _mglWindowPos3iv;
    PFNGLWINDOWPOS3SPROC _mglWindowPos3s;
    PFNGLWINDOWPOS3SVPROC _mglWindowPos3sv;
    PFNGLBLENDCOLORPROC _mglBlendColor;
    PFNGLBLENDEQUATIONPROC _mglBlendEquation;
    PFNGLGENQUERIESPROC _mglGenQueries;
    PFNGLDELETEQUERIESPROC _mglDeleteQueries;
    PFNGLISQUERYPROC _mglIsQuery;
    PFNGLBEGINQUERYPROC _mglBeginQuery;
    PFNGLENDQUERYPROC _mglEndQuery;
    PFNGLGETQUERYIVPROC _mglGetQueryiv;
    PFNGLGETQUERYOBJECTIVPROC _mglGetQueryObjectiv;
    PFNGLGETQUERYOBJECTUIVPROC _mglGetQueryObjectuiv;
    PFNGLBINDBUFFERPROC _mglBindBuffer;
    PFNGLDELETEBUFFERSPROC _mglDeleteBuffers;
    PFNGLGENBUFFERSPROC _mglGenBuffers;
    PFNGLISBUFFERPROC _mglIsBuffer;
    PFNGLBUFFERDATAPROC _mglBufferData;
    PFNGLBUFFERSUBDATAPROC _mglBufferSubData;
    PFNGLGETBUFFERSUBDATAPROC _mglGetBufferSubData;
    PFNGLMAPBUFFERPROC _mglMapBuffer;
    PFNGLUNMAPBUFFERPROC _mglUnmapBuffer;
    PFNGLGETBUFFERPARAMETERIVPROC _mglGetBufferParameteriv;
    PFNGLGETBUFFERPOINTERVPROC _mglGetBufferPointerv;
    PFNGLBLENDEQUATIONSEPARATEPROC _mglBlendEquationSeparate;
    PFNGLDRAWBUFFERSPROC _mglDrawBuffers;
    PFNGLSTENCILOPSEPARATEPROC _mglStencilOpSeparate;
    PFNGLSTENCILFUNCSEPARATEPROC _mglStencilFuncSeparate;
    PFNGLSTENCILMASKSEPARATEPROC _mglStencilMaskSeparate;
    PFNGLATTACHSHADERPROC _mglAttachShader;
    PFNGLBINDATTRIBLOCATIONPROC _mglBindAttribLocation;
    PFNGLCOMPILESHADERPROC _mglCompileShader;
    PFNGLCREATEPROGRAMPROC _mglCreateProgram;
    PFNGLCREATESHADERPROC _mglCreateShader;
    PFNGLDELETEPROGRAMPROC _mglDeleteProgram;
    PFNGLDELETESHADERPROC _mglDeleteShader;
    PFNGLDETACHSHADERPROC _mglDetachShader;
    PFNGLDISABLEVERTEXATTRIBARRAYPROC _mglDisableVertexAttribArray;
    PFNGLENABLEVERTEXATTRIBARRAYPROC _mglEnableVertexAttribArray;
    PFNGLGETACTIVEATTRIBPROC _mglGetActiveAttrib;
    PFNGLGETACTIVEUNIFORMPROC _mglGetActiveUniform;
    PFNGLGETATTACHEDSHADERSPROC _mglGetAttachedShaders;
    PFNGLGETATTRIBLOCATIONPROC _mglGetAttribLocation;
    PFNGLGETPROGRAMIVPROC _mglGetProgramiv;
    PFNGLGETPROGRAMINFOLOGPROC _mglGetProgramInfoLog;
    PFNGLGETSHADERIVPROC _mglGetShaderiv;
    PFNGLGETSHADERINFOLOGPROC _mglGetShaderInfoLog;
    PFNGLGETSHADERSOURCEPROC _mglGetShaderSource;
    PFNGLGETUNIFORMLOCATIONPROC _mglGetUniformLocation;
    PFNGLGETUNIFORMFVPROC _mglGetUniformfv;
    PFNGLGETUNIFORMIVPROC _mglGetUniformiv;
    PFNGLGETVERTEXATTRIBDVPROC _mglGetVertexAttribdv;
    PFNGLGETVERTEXATTRIBFVPROC _mglGetVertexAttribfv;
    PFNGLGETVERTEXATTRIBIVPROC _mglGetVertexAttribiv;
    PFNGLGETVERTEXATTRIBPOINTERVPROC _mglGetVertexAttribPointerv;
    PFNGLISPROGRAMPROC _mglIsProgram;
    PFNGLISSHADERPROC _mglIsShader;
    PFNGLLINKPROGRAMPROC _mglLinkProgram;
    PFNGLSHADERSOURCEPROC _mglShaderSource;
    PFNGLUSEPROGRAMPROC _mglUseProgram;
    PFNGLUNIFORM1FPROC _mglUniform1f;
    PFNGLUNIFORM2FPROC _mglUniform2f;
    PFNGLUNIFORM3FPROC _mglUniform3f;
    PFNGLUNIFORM4FPROC _mglUniform4f;
    PFNGLUNIFORM1IPROC _mglUniform1i;
    PFNGLUNIFORM2IPROC _mglUniform2i;
    PFNGLUNIFORM3IPROC _mglUniform3i;
    PFNGLUNIFORM4IPROC _mglUniform4i;
    PFNGLUNIFORM1FVPROC _mglUniform1fv;
    PFNGLUNIFORM2FVPROC _mglUniform2fv;
    PFNGLUNIFORM3FVPROC _mglUniform3fv;
    PFNGLUNIFORM4FVPROC _mglUniform4fv;
    PFNGLUNIFORM1IVPROC _mglUniform1iv;
    PFNGLUNIFORM2IVPROC _mglUniform2iv;
    PFNGLUNIFORM3IVPROC _mglUniform3iv;
    PFNGLUNIFORM4IVPROC _mglUniform4iv;
    PFNGLUNIFORMMATRIX2FVPROC _mglUniformMatrix2fv;
    PFNGLUNIFORMMATRIX3FVPROC _mglUniformMatrix3fv;
    PFNGLUNIFORMMATRIX4FVPROC _mglUniformMatrix4fv;
    PFNGLVALIDATEPROGRAMPROC _mglValidateProgram;
    PFNGLVERTEXATTRIB1DPROC _mglVertexAttrib1d;
    PFNGLVERTEXATTRIB1DVPROC _mglVertexAttrib1dv;
    PFNGLVERTEXATTRIB1FPROC _mglVertexAttrib1f;
    PFNGLVERTEXATTRIB1FVPROC _mglVertexAttrib1fv;
    PFNGLVERTEXATTRIB1SPROC _mglVertexAttrib1s;
    PFNGLVERTEXATTRIB1SVPROC _mglVertexAttrib1sv;
    PFNGLVERTEXATTRIB2DPROC _mglVertexAttrib2d;
    PFNGLVERTEXATTRIB2DVPROC _mglVertexAttrib2dv;
    PFNGLVERTEXATTRIB2FPROC _mglVertexAttrib2f;
    PFNGLVERTEXATTRIB2FVPROC _mglVertexAttrib2fv;
    PFNGLVERTEXATTRIB2SPROC _mglVertexAttrib2s;
    PFNGLVERTEXATTRIB2SVPROC _mglVertexAttrib2sv;
    PFNGLVERTEXATTRIB3DPROC _mglVertexAttrib3d;
    PFNGLVERTEXATTRIB3DVPROC _mglVertexAttrib3dv;
    PFNGLVERTEXATTRIB3FPROC _mglVertexAttrib3f;
    PFNGLVERTEXATTRIB3FVPROC _mglVertexAttrib3fv;
    PFNGLVERTEXATTRIB3SPROC _mglVertexAttrib3s;
    PFNGLVERTEXATTRIB3SVPROC _mglVertexAttrib3sv;
    PFNGLVERTEXATTRIB4NBVPROC _mglVertexAttrib4Nbv;
    PFNGLVERTEXATTRIB4NIVPROC _mglVertexAttrib4Niv;
    PFNGLVERTEXATTRIB4NSVPROC _mglVertexAttrib4Nsv;
    PFNGLVERTEXATTRIB4NUBPROC _mglVertexAttrib4Nub;
    PFNGLVERTEXATTRIB4NUBVPROC _mglVertexAttrib4Nubv;
    PFNGLVERTEXATTRIB4NUIVPROC _mglVertexAttrib4Nuiv;
    PFNGLVERTEXATTRIB4NUSVPROC _mglVertexAttrib4Nusv;
    PFNGLVERTEXATTRIB4BVPROC _mglVertexAttrib4bv;
    PFNGLVERTEXATTRIB4DPROC _mglVertexAttrib4d;
    PFNGLVERTEXATTRIB4DVPROC _mglVertexAttrib4dv;
    PFNGLVERTEXATTRIB4FPROC _mglVertexAttrib4f;
    PFNGLVERTEXATTRIB4FVPROC _mglVertexAttrib4fv;
    PFNGLVERTEXATTRIB4IVPROC _mglVertexAttrib4iv;
    PFNGLVERTEXATTRIB4SPROC _mglVertexAttrib4s;
    PFNGLVERTEXATTRIB4SVPROC _mglVertexAttrib4sv;
    PFNGLVERTEXATTRIB4UBVPROC _mglVertexAttrib4ubv;
    PFNGLVERTEXATTRIB4UIVPROC _mglVertexAttrib4uiv;
    PFNGLVERTEXATTRIB4USVPROC _mglVertexAttrib4usv;
    PFNGLVERTEXATTRIBPOINTERPROC _mglVertexAttribPointer;
    PFNGLBINDBUFFERARBPROC _mglBindBufferARB;
    PFNGLDELETEBUFFERSARBPROC _mglDeleteBuffersARB;
    PFNGLGENBUFFERSARBPROC _mglGenBuffersARB;
    PFNGLISBUFFERARBPROC _mglIsBufferARB;
    PFNGLBUFFERDATAARBPROC _mglBufferDataARB;
    PFNGLBUFFERSUBDATAARBPROC _mglBufferSubDataARB;
    PFNGLGETBUFFERSUBDATAARBPROC _mglGetBufferSubDataARB;
    PFNGLMAPBUFFERARBPROC _mglMapBufferARB;
    PFNGLUNMAPBUFFERARBPROC _mglUnmapBufferARB;
    PFNGLGETBUFFERPARAMETERIVARBPROC _mglGetBufferParameterivARB;
    PFNGLGETBUFFERPOINTERVARBPROC _mglGetBufferPointervARB;
    PFNGLBINDVERTEXARRAYPROC _mglBindVertexArray;
    PFNGLDELETEVERTEXARRAYSPROC _mglDeleteVertexArrays;
    PFNGLGENVERTEXARRAYSPROC _mglGenVertexArrays;
    PFNGLISVERTEXARRAYPROC _mglIsVertexArray;
    PFNGLISRENDERBUFFERPROC _mglIsRenderbuffer;
    PFNGLBINDRENDERBUFFERPROC _mglBindRenderbuffer;
    PFNGLDELETERENDERBUFFERSPROC _mglDeleteRenderbuffers;
    PFNGLGENRENDERBUFFERSPROC _mglGenRenderbuffers;
    PFNGLRENDERBUFFERSTORAGEPROC _mglRenderbufferStorage;
    PFNGLGETRENDERBUFFERPARAMETERIVPROC _mglGetRenderbufferParameteriv;
    PFNGLISFRAMEBUFFERPROC _mglIsFramebuffer;
    PFNGLBINDFRAMEBUFFERPROC _mglBindFramebuffer;
    PFNGLDELETEFRAMEBUFFERSPROC _mglDeleteFramebuffers;
    PFNGLGENFRAMEBUFFERSPROC _mglGenFramebuffers;
    PFNGLCHECKFRAMEBUFFERSTATUSPROC _mglCheckFramebufferStatus;
    PFNGLFRAMEBUFFERTEXTURE1DPROC _mglFramebufferTexture1D;
    PFNGLFRAMEBUFFERTEXTURE2DPROC _mglFramebufferTexture2D;
    PFNGLFRAMEBUFFERTEXTURE3DPROC _mglFramebufferTexture3D;
    PFNGLFRAMEBUFFERRENDERBUFFERPROC _mglFramebufferRenderbuffer;
    PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC _mglGetFramebufferAttachmentParameteriv;
    PFNGLGENERATEMIPMAPPROC _mglGenerateMipmap;
    PFNGLBLITFRAMEBUFFERPROC _mglBlitFramebuffer;
    PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC _mglRenderbufferStorageMultisample;
    PFNGLFRAMEBUFFERTEXTURELAYERPROC _mglFramebufferTextureLayer;
    PFNGLISRENDERBUFFEREXTPROC _mglIsRenderbufferEXT;
    PFNGLBINDRENDERBUFFEREXTPROC _mglBindRenderbufferEXT;
    PFNGLDELETERENDERBUFFERSEXTPROC _mglDeleteRenderbuffersEXT;
    PFNGLGENRENDERBUFFERSEXTPROC _mglGenRenderbuffersEXT;
    PFNGLRENDERBUFFERSTORAGEEXTPROC _mglRenderbufferStorageEXT;
    PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC _mglGetRenderbufferParameterivEXT;
    PFNGLISFRAMEBUFFEREXTPROC _mglIsFramebufferEXT;
    PFNGLBINDFRAMEBUFFEREXTPROC _mglBindFramebufferEXT;
    PFNGLDELETEFRAMEBUFFERSEXTPROC _mglDeleteFramebuffersEXT;
    PFNGLGENFRAMEBUFFERSEXTPROC _mglGenFramebuffersEXT;
    PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC _mglCheckFramebufferStatusEXT;
    PFNGLFRAMEBUFFERTEXTURE1DEXTPROC _mglFramebufferTexture1DEXT;
    PFNGLFRAMEBUFFERTEXTURE2DEXTPROC _mglFramebufferTexture2DEXT;
    PFNGLFRAMEBUFFERTEXTURE3DEXTPROC _mglFramebufferTexture3DEXT;
    PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC _mglFramebufferRenderbufferEXT;
    PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC _mglGetFramebufferAttachmentParameterivEXT;
    PFNGLGENERATEMIPMAPEXTPROC _mglGenerateMipmapEXT;
    PFNGLBINDVERTEXARRAYAPPLEPROC _mglBindVertexArrayAPPLE;
    PFNGLDELETEVERTEXARRAYSAPPLEPROC _mglDeleteVertexArraysAPPLE;
    PFNGLGENVERTEXARRAYSAPPLEPROC _mglGenVertexArraysAPPLE;
    PFNGLISVERTEXARRAYAPPLEPROC _mglIsVertexArrayAPPLE;


public: 


// Declare a static non MT-safe load function that must be called once to initialize functions
    static void load() {
         (void)getInstance();
    }

    static bool isGPU() {
         return USEOPENGL;
    }

    static void glCullFace(GLenum mode) {
        getInstance()._mglCullFace(mode);
    }

    static void glFrontFace(GLenum mode) {
        getInstance()._mglFrontFace(mode);
    }

    static void glHint(GLenum target, GLenum mode) {
        getInstance()._mglHint(target, mode);
    }

    static void glLineWidth(GLfloat width) {
        getInstance()._mglLineWidth(width);
    }

    static void glPointSize(GLfloat size) {
        getInstance()._mglPointSize(size);
    }

    static void glPolygonMode(GLenum face, GLenum mode) {
        getInstance()._mglPolygonMode(face, mode);
    }

    static void glScissor(GLint x, GLint y, GLsizei width, GLsizei height) {
        getInstance()._mglScissor(x, y, width, height);
    }

    static void glTexParameterf(GLenum target, GLenum pname, GLfloat param) {
        getInstance()._mglTexParameterf(target, pname, param);
    }

    static void glTexParameterfv(GLenum target, GLenum pname, const GLfloat* params) {
        getInstance()._mglTexParameterfv(target, pname, params);
    }

    static void glTexParameteri(GLenum target, GLenum pname, GLint param) {
        getInstance()._mglTexParameteri(target, pname, param);
    }

    static void glTexParameteriv(GLenum target, GLenum pname, const GLint* params) {
        getInstance()._mglTexParameteriv(target, pname, params);
    }

    static void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels) {
        getInstance()._mglTexImage1D(target, level, internalformat, width, border, format, type, pixels);
    }

    static void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels) {
        getInstance()._mglTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
    }

    static void glDrawBuffer(GLenum buf) {
        getInstance()._mglDrawBuffer(buf);
    }

    static void glClear(GLbitfield mask) {
        getInstance()._mglClear(mask);
    }

    static void glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
        getInstance()._mglClearColor(red, green, blue, alpha);
    }

    static void glClearStencil(GLint s) {
        getInstance()._mglClearStencil(s);
    }

    static void glClearDepth(GLdouble depth) {
        getInstance()._mglClearDepth(depth);
    }

    static void glStencilMask(GLuint mask) {
        getInstance()._mglStencilMask(mask);
    }

    static void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
        getInstance()._mglColorMask(red, green, blue, alpha);
    }

    static void glDepthMask(GLboolean flag) {
        getInstance()._mglDepthMask(flag);
    }

    static void glDisable(GLenum cap) {
        getInstance()._mglDisable(cap);
    }

    static void glEnable(GLenum cap) {
        getInstance()._mglEnable(cap);
    }

    static void glFinish() {
        getInstance()._mglFinish();
    }

    static void glFlush() {
        getInstance()._mglFlush();
    }

    static void glBlendFunc(GLenum sfactor, GLenum dfactor) {
        getInstance()._mglBlendFunc(sfactor, dfactor);
    }

    static void glLogicOp(GLenum opcode) {
        getInstance()._mglLogicOp(opcode);
    }

    static void glStencilFunc(GLenum func, GLint ref, GLuint mask) {
        getInstance()._mglStencilFunc(func, ref, mask);
    }

    static void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass) {
        getInstance()._mglStencilOp(fail, zfail, zpass);
    }

    static void glDepthFunc(GLenum func) {
        getInstance()._mglDepthFunc(func);
    }

    static void glPixelStoref(GLenum pname, GLfloat param) {
        getInstance()._mglPixelStoref(pname, param);
    }

    static void glPixelStorei(GLenum pname, GLint param) {
        getInstance()._mglPixelStorei(pname, param);
    }

    static void glReadBuffer(GLenum src) {
        getInstance()._mglReadBuffer(src);
    }

    static void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels) {
        getInstance()._mglReadPixels(x, y, width, height, format, type, pixels);
    }

    static void glGetBooleanv(GLenum pname, GLboolean* data) {
        getInstance()._mglGetBooleanv(pname, data);
    }

    static void glGetDoublev(GLenum pname, GLdouble* data) {
        getInstance()._mglGetDoublev(pname, data);
    }

    static GLenum glGetError() {
        return getInstance()._mglGetError();
    }

    static void glGetFloatv(GLenum pname, GLfloat* data) {
        getInstance()._mglGetFloatv(pname, data);
    }

    static void glGetIntegerv(GLenum pname, GLint* data) {
        getInstance()._mglGetIntegerv(pname, data);
    }

    static const GLubyte* glGetString(GLenum name) {
        return getInstance()._mglGetString(name);
    }

    static void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void* pixels) {
        getInstance()._mglGetTexImage(target, level, format, type, pixels);
    }

    static void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat* params) {
        getInstance()._mglGetTexParameterfv(target, pname, params);
    }

    static void glGetTexParameteriv(GLenum target, GLenum pname, GLint* params) {
        getInstance()._mglGetTexParameteriv(target, pname, params);
    }

    static void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat* params) {
        getInstance()._mglGetTexLevelParameterfv(target, level, pname, params);
    }

    static void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint* params) {
        getInstance()._mglGetTexLevelParameteriv(target, level, pname, params);
    }

    static GLboolean glIsEnabled(GLenum cap) {
        return getInstance()._mglIsEnabled(cap);
    }

    static void glDepthRange(GLdouble nearVal, GLdouble farVal) {
        getInstance()._mglDepthRange(nearVal, farVal);
    }

    static void glViewport(GLint x, GLint y, GLsizei width, GLsizei height) {
        getInstance()._mglViewport(x, y, width, height);
    }

    static void glNewList(GLuint list, GLenum mode) {
        getInstance()._mglNewList(list, mode);
    }

    static void glEndList() {
        getInstance()._mglEndList();
    }

    static void glCallList(GLuint list) {
        getInstance()._mglCallList(list);
    }

    static void glCallLists(GLsizei n, GLenum type, const void* lists) {
        getInstance()._mglCallLists(n, type, lists);
    }

    static void glDeleteLists(GLuint list, GLsizei range) {
        getInstance()._mglDeleteLists(list, range);
    }

    static GLuint glGenLists(GLsizei range) {
        return getInstance()._mglGenLists(range);
    }

    static void glListBase(GLuint base) {
        getInstance()._mglListBase(base);
    }

    static void glBegin(GLenum mode) {
        getInstance()._mglBegin(mode);
    }

    static void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte* bitmap) {
        getInstance()._mglBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
    }

    static void glColor3b(GLbyte red, GLbyte green, GLbyte blue) {
        getInstance()._mglColor3b(red, green, blue);
    }

    static void glColor3bv(const GLbyte* v) {
        getInstance()._mglColor3bv(v);
    }

    static void glColor3d(GLdouble red, GLdouble green, GLdouble blue) {
        getInstance()._mglColor3d(red, green, blue);
    }

    static void glColor3dv(const GLdouble* v) {
        getInstance()._mglColor3dv(v);
    }

    static void glColor3f(GLfloat red, GLfloat green, GLfloat blue) {
        getInstance()._mglColor3f(red, green, blue);
    }

    static void glColor3fv(const GLfloat* v) {
        getInstance()._mglColor3fv(v);
    }

    static void glColor3i(GLint red, GLint green, GLint blue) {
        getInstance()._mglColor3i(red, green, blue);
    }

    static void glColor3iv(const GLint* v) {
        getInstance()._mglColor3iv(v);
    }

    static void glColor3s(GLshort red, GLshort green, GLshort blue) {
        getInstance()._mglColor3s(red, green, blue);
    }

    static void glColor3sv(const GLshort* v) {
        getInstance()._mglColor3sv(v);
    }

    static void glColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
        getInstance()._mglColor3ub(red, green, blue);
    }

    static void glColor3ubv(const GLubyte* v) {
        getInstance()._mglColor3ubv(v);
    }

    static void glColor3ui(GLuint red, GLuint green, GLuint blue) {
        getInstance()._mglColor3ui(red, green, blue);
    }

    static void glColor3uiv(const GLuint* v) {
        getInstance()._mglColor3uiv(v);
    }

    static void glColor3us(GLushort red, GLushort green, GLushort blue) {
        getInstance()._mglColor3us(red, green, blue);
    }

    static void glColor3usv(const GLushort* v) {
        getInstance()._mglColor3usv(v);
    }

    static void glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) {
        getInstance()._mglColor4b(red, green, blue, alpha);
    }

    static void glColor4bv(const GLbyte* v) {
        getInstance()._mglColor4bv(v);
    }

    static void glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) {
        getInstance()._mglColor4d(red, green, blue, alpha);
    }

    static void glColor4dv(const GLdouble* v) {
        getInstance()._mglColor4dv(v);
    }

    static void glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
        getInstance()._mglColor4f(red, green, blue, alpha);
    }

    static void glColor4fv(const GLfloat* v) {
        getInstance()._mglColor4fv(v);
    }

    static void glColor4i(GLint red, GLint green, GLint blue, GLint alpha) {
        getInstance()._mglColor4i(red, green, blue, alpha);
    }

    static void glColor4iv(const GLint* v) {
        getInstance()._mglColor4iv(v);
    }

    static void glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) {
        getInstance()._mglColor4s(red, green, blue, alpha);
    }

    static void glColor4sv(const GLshort* v) {
        getInstance()._mglColor4sv(v);
    }

    static void glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) {
        getInstance()._mglColor4ub(red, green, blue, alpha);
    }

    static void glColor4ubv(const GLubyte* v) {
        getInstance()._mglColor4ubv(v);
    }

    static void glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) {
        getInstance()._mglColor4ui(red, green, blue, alpha);
    }

    static void glColor4uiv(const GLuint* v) {
        getInstance()._mglColor4uiv(v);
    }

    static void glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) {
        getInstance()._mglColor4us(red, green, blue, alpha);
    }

    static void glColor4usv(const GLushort* v) {
        getInstance()._mglColor4usv(v);
    }

    static void glEdgeFlag(GLboolean flag) {
        getInstance()._mglEdgeFlag(flag);
    }

    static void glEdgeFlagv(const GLboolean* flag) {
        getInstance()._mglEdgeFlagv(flag);
    }

    static void glEnd() {
        getInstance()._mglEnd();
    }

    static void glIndexd(GLdouble c) {
        getInstance()._mglIndexd(c);
    }

    static void glIndexdv(const GLdouble* c) {
        getInstance()._mglIndexdv(c);
    }

    static void glIndexf(GLfloat c) {
        getInstance()._mglIndexf(c);
    }

    static void glIndexfv(const GLfloat* c) {
        getInstance()._mglIndexfv(c);
    }

    static void glIndexi(GLint c) {
        getInstance()._mglIndexi(c);
    }

    static void glIndexiv(const GLint* c) {
        getInstance()._mglIndexiv(c);
    }

    static void glIndexs(GLshort c) {
        getInstance()._mglIndexs(c);
    }

    static void glIndexsv(const GLshort* c) {
        getInstance()._mglIndexsv(c);
    }

    static void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz) {
        getInstance()._mglNormal3b(nx, ny, nz);
    }

    static void glNormal3bv(const GLbyte* v) {
        getInstance()._mglNormal3bv(v);
    }

    static void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz) {
        getInstance()._mglNormal3d(nx, ny, nz);
    }

    static void glNormal3dv(const GLdouble* v) {
        getInstance()._mglNormal3dv(v);
    }

    static void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz) {
        getInstance()._mglNormal3f(nx, ny, nz);
    }

    static void glNormal3fv(const GLfloat* v) {
        getInstance()._mglNormal3fv(v);
    }

    static void glNormal3i(GLint nx, GLint ny, GLint nz) {
        getInstance()._mglNormal3i(nx, ny, nz);
    }

    static void glNormal3iv(const GLint* v) {
        getInstance()._mglNormal3iv(v);
    }

    static void glNormal3s(GLshort nx, GLshort ny, GLshort nz) {
        getInstance()._mglNormal3s(nx, ny, nz);
    }

    static void glNormal3sv(const GLshort* v) {
        getInstance()._mglNormal3sv(v);
    }

    static void glRasterPos2d(GLdouble x, GLdouble y) {
        getInstance()._mglRasterPos2d(x, y);
    }

    static void glRasterPos2dv(const GLdouble* v) {
        getInstance()._mglRasterPos2dv(v);
    }

    static void glRasterPos2f(GLfloat x, GLfloat y) {
        getInstance()._mglRasterPos2f(x, y);
    }

    static void glRasterPos2fv(const GLfloat* v) {
        getInstance()._mglRasterPos2fv(v);
    }

    static void glRasterPos2i(GLint x, GLint y) {
        getInstance()._mglRasterPos2i(x, y);
    }

    static void glRasterPos2iv(const GLint* v) {
        getInstance()._mglRasterPos2iv(v);
    }

    static void glRasterPos2s(GLshort x, GLshort y) {
        getInstance()._mglRasterPos2s(x, y);
    }

    static void glRasterPos2sv(const GLshort* v) {
        getInstance()._mglRasterPos2sv(v);
    }

    static void glRasterPos3d(GLdouble x, GLdouble y, GLdouble z) {
        getInstance()._mglRasterPos3d(x, y, z);
    }

    static void glRasterPos3dv(const GLdouble* v) {
        getInstance()._mglRasterPos3dv(v);
    }

    static void glRasterPos3f(GLfloat x, GLfloat y, GLfloat z) {
        getInstance()._mglRasterPos3f(x, y, z);
    }

    static void glRasterPos3fv(const GLfloat* v) {
        getInstance()._mglRasterPos3fv(v);
    }

    static void glRasterPos3i(GLint x, GLint y, GLint z) {
        getInstance()._mglRasterPos3i(x, y, z);
    }

    static void glRasterPos3iv(const GLint* v) {
        getInstance()._mglRasterPos3iv(v);
    }

    static void glRasterPos3s(GLshort x, GLshort y, GLshort z) {
        getInstance()._mglRasterPos3s(x, y, z);
    }

    static void glRasterPos3sv(const GLshort* v) {
        getInstance()._mglRasterPos3sv(v);
    }

    static void glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
        getInstance()._mglRasterPos4d(x, y, z, w);
    }

    static void glRasterPos4dv(const GLdouble* v) {
        getInstance()._mglRasterPos4dv(v);
    }

    static void glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
        getInstance()._mglRasterPos4f(x, y, z, w);
    }

    static void glRasterPos4fv(const GLfloat* v) {
        getInstance()._mglRasterPos4fv(v);
    }

    static void glRasterPos4i(GLint x, GLint y, GLint z, GLint w) {
        getInstance()._mglRasterPos4i(x, y, z, w);
    }

    static void glRasterPos4iv(const GLint* v) {
        getInstance()._mglRasterPos4iv(v);
    }

    static void glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) {
        getInstance()._mglRasterPos4s(x, y, z, w);
    }

    static void glRasterPos4sv(const GLshort* v) {
        getInstance()._mglRasterPos4sv(v);
    }

    static void glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) {
        getInstance()._mglRectd(x1, y1, x2, y2);
    }

    static void glRectdv(const GLdouble* v1, const GLdouble* v2) {
        getInstance()._mglRectdv(v1, v2);
    }

    static void glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) {
        getInstance()._mglRectf(x1, y1, x2, y2);
    }

    static void glRectfv(const GLfloat* v1, const GLfloat* v2) {
        getInstance()._mglRectfv(v1, v2);
    }

    static void glRecti(GLint x1, GLint y1, GLint x2, GLint y2) {
        getInstance()._mglRecti(x1, y1, x2, y2);
    }

    static void glRectiv(const GLint* v1, const GLint* v2) {
        getInstance()._mglRectiv(v1, v2);
    }

    static void glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) {
        getInstance()._mglRects(x1, y1, x2, y2);
    }

    static void glRectsv(const GLshort* v1, const GLshort* v2) {
        getInstance()._mglRectsv(v1, v2);
    }

    static void glTexCoord1d(GLdouble s) {
        getInstance()._mglTexCoord1d(s);
    }

    static void glTexCoord1dv(const GLdouble* v) {
        getInstance()._mglTexCoord1dv(v);
    }

    static void glTexCoord1f(GLfloat s) {
        getInstance()._mglTexCoord1f(s);
    }

    static void glTexCoord1fv(const GLfloat* v) {
        getInstance()._mglTexCoord1fv(v);
    }

    static void glTexCoord1i(GLint s) {
        getInstance()._mglTexCoord1i(s);
    }

    static void glTexCoord1iv(const GLint* v) {
        getInstance()._mglTexCoord1iv(v);
    }

    static void glTexCoord1s(GLshort s) {
        getInstance()._mglTexCoord1s(s);
    }

    static void glTexCoord1sv(const GLshort* v) {
        getInstance()._mglTexCoord1sv(v);
    }

    static void glTexCoord2d(GLdouble s, GLdouble t) {
        getInstance()._mglTexCoord2d(s, t);
    }

    static void glTexCoord2dv(const GLdouble* v) {
        getInstance()._mglTexCoord2dv(v);
    }

    static void glTexCoord2f(GLfloat s, GLfloat t) {
        getInstance()._mglTexCoord2f(s, t);
    }

    static void glTexCoord2fv(const GLfloat* v) {
        getInstance()._mglTexCoord2fv(v);
    }

    static void glTexCoord2i(GLint s, GLint t) {
        getInstance()._mglTexCoord2i(s, t);
    }

    static void glTexCoord2iv(const GLint* v) {
        getInstance()._mglTexCoord2iv(v);
    }

    static void glTexCoord2s(GLshort s, GLshort t) {
        getInstance()._mglTexCoord2s(s, t);
    }

    static void glTexCoord2sv(const GLshort* v) {
        getInstance()._mglTexCoord2sv(v);
    }

    static void glTexCoord3d(GLdouble s, GLdouble t, GLdouble r) {
        getInstance()._mglTexCoord3d(s, t, r);
    }

    static void glTexCoord3dv(const GLdouble* v) {
        getInstance()._mglTexCoord3dv(v);
    }

    static void glTexCoord3f(GLfloat s, GLfloat t, GLfloat r) {
        getInstance()._mglTexCoord3f(s, t, r);
    }

    static void glTexCoord3fv(const GLfloat* v) {
        getInstance()._mglTexCoord3fv(v);
    }

    static void glTexCoord3i(GLint s, GLint t, GLint r) {
        getInstance()._mglTexCoord3i(s, t, r);
    }

    static void glTexCoord3iv(const GLint* v) {
        getInstance()._mglTexCoord3iv(v);
    }

    static void glTexCoord3s(GLshort s, GLshort t, GLshort r) {
        getInstance()._mglTexCoord3s(s, t, r);
    }

    static void glTexCoord3sv(const GLshort* v) {
        getInstance()._mglTexCoord3sv(v);
    }

    static void glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
        getInstance()._mglTexCoord4d(s, t, r, q);
    }

    static void glTexCoord4dv(const GLdouble* v) {
        getInstance()._mglTexCoord4dv(v);
    }

    static void glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
        getInstance()._mglTexCoord4f(s, t, r, q);
    }

    static void glTexCoord4fv(const GLfloat* v) {
        getInstance()._mglTexCoord4fv(v);
    }

    static void glTexCoord4i(GLint s, GLint t, GLint r, GLint q) {
        getInstance()._mglTexCoord4i(s, t, r, q);
    }

    static void glTexCoord4iv(const GLint* v) {
        getInstance()._mglTexCoord4iv(v);
    }

    static void glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) {
        getInstance()._mglTexCoord4s(s, t, r, q);
    }

    static void glTexCoord4sv(const GLshort* v) {
        getInstance()._mglTexCoord4sv(v);
    }

    static void glVertex2d(GLdouble x, GLdouble y) {
        getInstance()._mglVertex2d(x, y);
    }

    static void glVertex2dv(const GLdouble* v) {
        getInstance()._mglVertex2dv(v);
    }

    static void glVertex2f(GLfloat x, GLfloat y) {
        getInstance()._mglVertex2f(x, y);
    }

    static void glVertex2fv(const GLfloat* v) {
        getInstance()._mglVertex2fv(v);
    }

    static void glVertex2i(GLint x, GLint y) {
        getInstance()._mglVertex2i(x, y);
    }

    static void glVertex2iv(const GLint* v) {
        getInstance()._mglVertex2iv(v);
    }

    static void glVertex2s(GLshort x, GLshort y) {
        getInstance()._mglVertex2s(x, y);
    }

    static void glVertex2sv(const GLshort* v) {
        getInstance()._mglVertex2sv(v);
    }

    static void glVertex3d(GLdouble x, GLdouble y, GLdouble z) {
        getInstance()._mglVertex3d(x, y, z);
    }

    static void glVertex3dv(const GLdouble* v) {
        getInstance()._mglVertex3dv(v);
    }

    static void glVertex3f(GLfloat x, GLfloat y, GLfloat z) {
        getInstance()._mglVertex3f(x, y, z);
    }

    static void glVertex3fv(const GLfloat* v) {
        getInstance()._mglVertex3fv(v);
    }

    static void glVertex3i(GLint x, GLint y, GLint z) {
        getInstance()._mglVertex3i(x, y, z);
    }

    static void glVertex3iv(const GLint* v) {
        getInstance()._mglVertex3iv(v);
    }

    static void glVertex3s(GLshort x, GLshort y, GLshort z) {
        getInstance()._mglVertex3s(x, y, z);
    }

    static void glVertex3sv(const GLshort* v) {
        getInstance()._mglVertex3sv(v);
    }

    static void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
        getInstance()._mglVertex4d(x, y, z, w);
    }

    static void glVertex4dv(const GLdouble* v) {
        getInstance()._mglVertex4dv(v);
    }

    static void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
        getInstance()._mglVertex4f(x, y, z, w);
    }

    static void glVertex4fv(const GLfloat* v) {
        getInstance()._mglVertex4fv(v);
    }

    static void glVertex4i(GLint x, GLint y, GLint z, GLint w) {
        getInstance()._mglVertex4i(x, y, z, w);
    }

    static void glVertex4iv(const GLint* v) {
        getInstance()._mglVertex4iv(v);
    }

    static void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w) {
        getInstance()._mglVertex4s(x, y, z, w);
    }

    static void glVertex4sv(const GLshort* v) {
        getInstance()._mglVertex4sv(v);
    }

    static void glClipPlane(GLenum plane, const GLdouble* equation) {
        getInstance()._mglClipPlane(plane, equation);
    }

    static void glColorMaterial(GLenum face, GLenum mode) {
        getInstance()._mglColorMaterial(face, mode);
    }

    static void glFogf(GLenum pname, GLfloat param) {
        getInstance()._mglFogf(pname, param);
    }

    static void glFogfv(GLenum pname, const GLfloat* params) {
        getInstance()._mglFogfv(pname, params);
    }

    static void glFogi(GLenum pname, GLint param) {
        getInstance()._mglFogi(pname, param);
    }

    static void glFogiv(GLenum pname, const GLint* params) {
        getInstance()._mglFogiv(pname, params);
    }

    static void glLightf(GLenum light, GLenum pname, GLfloat param) {
        getInstance()._mglLightf(light, pname, param);
    }

    static void glLightfv(GLenum light, GLenum pname, const GLfloat* params) {
        getInstance()._mglLightfv(light, pname, params);
    }

    static void glLighti(GLenum light, GLenum pname, GLint param) {
        getInstance()._mglLighti(light, pname, param);
    }

    static void glLightiv(GLenum light, GLenum pname, const GLint* params) {
        getInstance()._mglLightiv(light, pname, params);
    }

    static void glLightModelf(GLenum pname, GLfloat param) {
        getInstance()._mglLightModelf(pname, param);
    }

    static void glLightModelfv(GLenum pname, const GLfloat* params) {
        getInstance()._mglLightModelfv(pname, params);
    }

    static void glLightModeli(GLenum pname, GLint param) {
        getInstance()._mglLightModeli(pname, param);
    }

    static void glLightModeliv(GLenum pname, const GLint* params) {
        getInstance()._mglLightModeliv(pname, params);
    }

    static void glLineStipple(GLint factor, GLushort pattern) {
        getInstance()._mglLineStipple(factor, pattern);
    }

    static void glMaterialf(GLenum face, GLenum pname, GLfloat param) {
        getInstance()._mglMaterialf(face, pname, param);
    }

    static void glMaterialfv(GLenum face, GLenum pname, const GLfloat* params) {
        getInstance()._mglMaterialfv(face, pname, params);
    }

    static void glMateriali(GLenum face, GLenum pname, GLint param) {
        getInstance()._mglMateriali(face, pname, param);
    }

    static void glMaterialiv(GLenum face, GLenum pname, const GLint* params) {
        getInstance()._mglMaterialiv(face, pname, params);
    }

    static void glPolygonStipple(const GLubyte* mask) {
        getInstance()._mglPolygonStipple(mask);
    }

    static void glShadeModel(GLenum mode) {
        getInstance()._mglShadeModel(mode);
    }

    static void glTexEnvf(GLenum target, GLenum pname, GLfloat param) {
        getInstance()._mglTexEnvf(target, pname, param);
    }

    static void glTexEnvfv(GLenum target, GLenum pname, const GLfloat* params) {
        getInstance()._mglTexEnvfv(target, pname, params);
    }

    static void glTexEnvi(GLenum target, GLenum pname, GLint param) {
        getInstance()._mglTexEnvi(target, pname, param);
    }

    static void glTexEnviv(GLenum target, GLenum pname, const GLint* params) {
        getInstance()._mglTexEnviv(target, pname, params);
    }

    static void glTexGend(GLenum coord, GLenum pname, GLdouble param) {
        getInstance()._mglTexGend(coord, pname, param);
    }

    static void glTexGendv(GLenum coord, GLenum pname, const GLdouble* params) {
        getInstance()._mglTexGendv(coord, pname, params);
    }

    static void glTexGenf(GLenum coord, GLenum pname, GLfloat param) {
        getInstance()._mglTexGenf(coord, pname, param);
    }

    static void glTexGenfv(GLenum coord, GLenum pname, const GLfloat* params) {
        getInstance()._mglTexGenfv(coord, pname, params);
    }

    static void glTexGeni(GLenum coord, GLenum pname, GLint param) {
        getInstance()._mglTexGeni(coord, pname, param);
    }

    static void glTexGeniv(GLenum coord, GLenum pname, const GLint* params) {
        getInstance()._mglTexGeniv(coord, pname, params);
    }

    static void glFeedbackBuffer(GLsizei size, GLenum type, GLfloat* buffer) {
        getInstance()._mglFeedbackBuffer(size, type, buffer);
    }

    static void glSelectBuffer(GLsizei size, GLuint* buffer) {
        getInstance()._mglSelectBuffer(size, buffer);
    }

    static GLint glRenderMode(GLenum mode) {
        return getInstance()._mglRenderMode(mode);
    }

    static void glInitNames() {
        getInstance()._mglInitNames();
    }

    static void glLoadName(GLuint name) {
        getInstance()._mglLoadName(name);
    }

    static void glPassThrough(GLfloat token) {
        getInstance()._mglPassThrough(token);
    }

    static void glPopName() {
        getInstance()._mglPopName();
    }

    static void glPushName(GLuint name) {
        getInstance()._mglPushName(name);
    }

    static void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
        getInstance()._mglClearAccum(red, green, blue, alpha);
    }

    static void glClearIndex(GLfloat c) {
        getInstance()._mglClearIndex(c);
    }

    static void glIndexMask(GLuint mask) {
        getInstance()._mglIndexMask(mask);
    }

    static void glAccum(GLenum op, GLfloat value) {
        getInstance()._mglAccum(op, value);
    }

    static void glPopAttrib() {
        getInstance()._mglPopAttrib();
    }

    static void glPushAttrib(GLbitfield mask) {
        getInstance()._mglPushAttrib(mask);
    }

    static void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points) {
        getInstance()._mglMap1d(target, u1, u2, stride, order, points);
    }

    static void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points) {
        getInstance()._mglMap1f(target, u1, u2, stride, order, points);
    }

    static void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points) {
        getInstance()._mglMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    }

    static void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points) {
        getInstance()._mglMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    }

    static void glMapGrid1d(GLint un, GLdouble u1, GLdouble u2) {
        getInstance()._mglMapGrid1d(un, u1, u2);
    }

    static void glMapGrid1f(GLint un, GLfloat u1, GLfloat u2) {
        getInstance()._mglMapGrid1f(un, u1, u2);
    }

    static void glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) {
        getInstance()._mglMapGrid2d(un, u1, u2, vn, v1, v2);
    }

    static void glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) {
        getInstance()._mglMapGrid2f(un, u1, u2, vn, v1, v2);
    }

    static void glEvalCoord1d(GLdouble u) {
        getInstance()._mglEvalCoord1d(u);
    }

    static void glEvalCoord1dv(const GLdouble* u) {
        getInstance()._mglEvalCoord1dv(u);
    }

    static void glEvalCoord1f(GLfloat u) {
        getInstance()._mglEvalCoord1f(u);
    }

    static void glEvalCoord1fv(const GLfloat* u) {
        getInstance()._mglEvalCoord1fv(u);
    }

    static void glEvalCoord2d(GLdouble u, GLdouble v) {
        getInstance()._mglEvalCoord2d(u, v);
    }

    static void glEvalCoord2dv(const GLdouble* u) {
        getInstance()._mglEvalCoord2dv(u);
    }

    static void glEvalCoord2f(GLfloat u, GLfloat v) {
        getInstance()._mglEvalCoord2f(u, v);
    }

    static void glEvalCoord2fv(const GLfloat* u) {
        getInstance()._mglEvalCoord2fv(u);
    }

    static void glEvalMesh1(GLenum mode, GLint i1, GLint i2) {
        getInstance()._mglEvalMesh1(mode, i1, i2);
    }

    static void glEvalPoint1(GLint i) {
        getInstance()._mglEvalPoint1(i);
    }

    static void glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) {
        getInstance()._mglEvalMesh2(mode, i1, i2, j1, j2);
    }

    static void glEvalPoint2(GLint i, GLint j) {
        getInstance()._mglEvalPoint2(i, j);
    }

    static void glAlphaFunc(GLenum func, GLfloat ref) {
        getInstance()._mglAlphaFunc(func, ref);
    }

    static void glPixelZoom(GLfloat xfactor, GLfloat yfactor) {
        getInstance()._mglPixelZoom(xfactor, yfactor);
    }

    static void glPixelTransferf(GLenum pname, GLfloat param) {
        getInstance()._mglPixelTransferf(pname, param);
    }

    static void glPixelTransferi(GLenum pname, GLint param) {
        getInstance()._mglPixelTransferi(pname, param);
    }

    static void glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat* values) {
        getInstance()._mglPixelMapfv(map, mapsize, values);
    }

    static void glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint* values) {
        getInstance()._mglPixelMapuiv(map, mapsize, values);
    }

    static void glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort* values) {
        getInstance()._mglPixelMapusv(map, mapsize, values);
    }

    static void glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) {
        getInstance()._mglCopyPixels(x, y, width, height, type);
    }

    static void glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels) {
        getInstance()._mglDrawPixels(width, height, format, type, pixels);
    }

    static void glGetClipPlane(GLenum plane, GLdouble* equation) {
        getInstance()._mglGetClipPlane(plane, equation);
    }

    static void glGetLightfv(GLenum light, GLenum pname, GLfloat* params) {
        getInstance()._mglGetLightfv(light, pname, params);
    }

    static void glGetLightiv(GLenum light, GLenum pname, GLint* params) {
        getInstance()._mglGetLightiv(light, pname, params);
    }

    static void glGetMapdv(GLenum target, GLenum query, GLdouble* v) {
        getInstance()._mglGetMapdv(target, query, v);
    }

    static void glGetMapfv(GLenum target, GLenum query, GLfloat* v) {
        getInstance()._mglGetMapfv(target, query, v);
    }

    static void glGetMapiv(GLenum target, GLenum query, GLint* v) {
        getInstance()._mglGetMapiv(target, query, v);
    }

    static void glGetMaterialfv(GLenum face, GLenum pname, GLfloat* params) {
        getInstance()._mglGetMaterialfv(face, pname, params);
    }

    static void glGetMaterialiv(GLenum face, GLenum pname, GLint* params) {
        getInstance()._mglGetMaterialiv(face, pname, params);
    }

    static void glGetPixelMapfv(GLenum map, GLfloat* values) {
        getInstance()._mglGetPixelMapfv(map, values);
    }

    static void glGetPixelMapuiv(GLenum map, GLuint* values) {
        getInstance()._mglGetPixelMapuiv(map, values);
    }

    static void glGetPixelMapusv(GLenum map, GLushort* values) {
        getInstance()._mglGetPixelMapusv(map, values);
    }

    static void glGetPolygonStipple(GLubyte* mask) {
        getInstance()._mglGetPolygonStipple(mask);
    }

    static void glGetTexEnvfv(GLenum target, GLenum pname, GLfloat* params) {
        getInstance()._mglGetTexEnvfv(target, pname, params);
    }

    static void glGetTexEnviv(GLenum target, GLenum pname, GLint* params) {
        getInstance()._mglGetTexEnviv(target, pname, params);
    }

    static void glGetTexGendv(GLenum coord, GLenum pname, GLdouble* params) {
        getInstance()._mglGetTexGendv(coord, pname, params);
    }

    static void glGetTexGenfv(GLenum coord, GLenum pname, GLfloat* params) {
        getInstance()._mglGetTexGenfv(coord, pname, params);
    }

    static void glGetTexGeniv(GLenum coord, GLenum pname, GLint* params) {
        getInstance()._mglGetTexGeniv(coord, pname, params);
    }

    static GLboolean glIsList(GLuint list) {
        return getInstance()._mglIsList(list);
    }

    static void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
        getInstance()._mglFrustum(left, right, bottom, top, zNear, zFar);
    }

    static void glLoadIdentity() {
        getInstance()._mglLoadIdentity();
    }

    static void glLoadMatrixf(const GLfloat* m) {
        getInstance()._mglLoadMatrixf(m);
    }

    static void glLoadMatrixd(const GLdouble* m) {
        getInstance()._mglLoadMatrixd(m);
    }

    static void glMatrixMode(GLenum mode) {
        getInstance()._mglMatrixMode(mode);
    }

    static void glMultMatrixf(const GLfloat* m) {
        getInstance()._mglMultMatrixf(m);
    }

    static void glMultMatrixd(const GLdouble* m) {
        getInstance()._mglMultMatrixd(m);
    }

    static void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
        getInstance()._mglOrtho(left, right, bottom, top, zNear, zFar);
    }

    static void glPopMatrix() {
        getInstance()._mglPopMatrix();
    }

    static void glPushMatrix() {
        getInstance()._mglPushMatrix();
    }

    static void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
        getInstance()._mglRotated(angle, x, y, z);
    }

    static void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
        getInstance()._mglRotatef(angle, x, y, z);
    }

    static void glScaled(GLdouble x, GLdouble y, GLdouble z) {
        getInstance()._mglScaled(x, y, z);
    }

    static void glScalef(GLfloat x, GLfloat y, GLfloat z) {
        getInstance()._mglScalef(x, y, z);
    }

    static void glTranslated(GLdouble x, GLdouble y, GLdouble z) {
        getInstance()._mglTranslated(x, y, z);
    }

    static void glTranslatef(GLfloat x, GLfloat y, GLfloat z) {
        getInstance()._mglTranslatef(x, y, z);
    }

    static void glDrawArrays(GLenum mode, GLint first, GLsizei count) {
        getInstance()._mglDrawArrays(mode, first, count);
    }

    static void glDrawElements(GLenum mode, GLsizei count, GLenum type, const void* indices) {
        getInstance()._mglDrawElements(mode, count, type, indices);
    }

    static void glGetPointerv(GLenum pname, void** params) {
        getInstance()._mglGetPointerv(pname, params);
    }

    static void glPolygonOffset(GLfloat factor, GLfloat units) {
        getInstance()._mglPolygonOffset(factor, units);
    }

    static void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
        getInstance()._mglCopyTexImage1D(target, level, internalformat, x, y, width, border);
    }

    static void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
        getInstance()._mglCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
    }

    static void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
        getInstance()._mglCopyTexSubImage1D(target, level, xoffset, x, y, width);
    }

    static void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
        getInstance()._mglCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
    }

    static void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels) {
        getInstance()._mglTexSubImage1D(target, level, xoffset, width, format, type, pixels);
    }

    static void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels) {
        getInstance()._mglTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    }

    static void glBindTexture(GLenum target, GLuint texture) {
        getInstance()._mglBindTexture(target, texture);
    }

    static void glDeleteTextures(GLsizei n, const GLuint* textures) {
        getInstance()._mglDeleteTextures(n, textures);
    }

    static void glGenTextures(GLsizei n, GLuint* textures) {
        getInstance()._mglGenTextures(n, textures);
    }

    static GLboolean glIsTexture(GLuint texture) {
        return getInstance()._mglIsTexture(texture);
    }

    static void glArrayElement(GLint i) {
        getInstance()._mglArrayElement(i);
    }

    static void glColorPointer(GLint size, GLenum type, GLsizei stride, const void* pointer) {
        getInstance()._mglColorPointer(size, type, stride, pointer);
    }

    static void glDisableClientState(GLenum array) {
        getInstance()._mglDisableClientState(array);
    }

    static void glEdgeFlagPointer(GLsizei stride, const void* pointer) {
        getInstance()._mglEdgeFlagPointer(stride, pointer);
    }

    static void glEnableClientState(GLenum array) {
        getInstance()._mglEnableClientState(array);
    }

    static void glIndexPointer(GLenum type, GLsizei stride, const void* pointer) {
        getInstance()._mglIndexPointer(type, stride, pointer);
    }

    static void glInterleavedArrays(GLenum format, GLsizei stride, const void* pointer) {
        getInstance()._mglInterleavedArrays(format, stride, pointer);
    }

    static void glNormalPointer(GLenum type, GLsizei stride, const void* pointer) {
        getInstance()._mglNormalPointer(type, stride, pointer);
    }

    static void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void* pointer) {
        getInstance()._mglTexCoordPointer(size, type, stride, pointer);
    }

    static void glVertexPointer(GLint size, GLenum type, GLsizei stride, const void* pointer) {
        getInstance()._mglVertexPointer(size, type, stride, pointer);
    }

    static GLboolean glAreTexturesResident(GLsizei n, const GLuint* textures, GLboolean* residences) {
        return getInstance()._mglAreTexturesResident(n, textures, residences);
    }

    static void glPrioritizeTextures(GLsizei n, const GLuint* textures, const GLfloat* priorities) {
        getInstance()._mglPrioritizeTextures(n, textures, priorities);
    }

    static void glIndexub(GLubyte c) {
        getInstance()._mglIndexub(c);
    }

    static void glIndexubv(const GLubyte* c) {
        getInstance()._mglIndexubv(c);
    }

    static void glPopClientAttrib() {
        getInstance()._mglPopClientAttrib();
    }

    static void glPushClientAttrib(GLbitfield mask) {
        getInstance()._mglPushClientAttrib(mask);
    }

    static void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices) {
        getInstance()._mglDrawRangeElements(mode, start, end, count, type, indices);
    }

    static void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels) {
        getInstance()._mglTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
    }

    static void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels) {
        getInstance()._mglTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    }

    static void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
        getInstance()._mglCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
    }

    static void glActiveTexture(GLenum texture) {
        getInstance()._mglActiveTexture(texture);
    }

    static void glSampleCoverage(GLfloat value, GLboolean invert) {
        getInstance()._mglSampleCoverage(value, invert);
    }

    static void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data) {
        getInstance()._mglCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
    }

    static void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data) {
        getInstance()._mglCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
    }

    static void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data) {
        getInstance()._mglCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
    }

    static void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data) {
        getInstance()._mglCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    }

    static void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data) {
        getInstance()._mglCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
    }

    static void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data) {
        getInstance()._mglCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
    }

    static void glGetCompressedTexImage(GLenum target, GLint level, void* img) {
        getInstance()._mglGetCompressedTexImage(target, level, img);
    }

    static void glClientActiveTexture(GLenum texture) {
        getInstance()._mglClientActiveTexture(texture);
    }

    static void glMultiTexCoord1d(GLenum target, GLdouble s) {
        getInstance()._mglMultiTexCoord1d(target, s);
    }

    static void glMultiTexCoord1dv(GLenum target, const GLdouble* v) {
        getInstance()._mglMultiTexCoord1dv(target, v);
    }

    static void glMultiTexCoord1f(GLenum target, GLfloat s) {
        getInstance()._mglMultiTexCoord1f(target, s);
    }

    static void glMultiTexCoord1fv(GLenum target, const GLfloat* v) {
        getInstance()._mglMultiTexCoord1fv(target, v);
    }

    static void glMultiTexCoord1i(GLenum target, GLint s) {
        getInstance()._mglMultiTexCoord1i(target, s);
    }

    static void glMultiTexCoord1iv(GLenum target, const GLint* v) {
        getInstance()._mglMultiTexCoord1iv(target, v);
    }

    static void glMultiTexCoord1s(GLenum target, GLshort s) {
        getInstance()._mglMultiTexCoord1s(target, s);
    }

    static void glMultiTexCoord1sv(GLenum target, const GLshort* v) {
        getInstance()._mglMultiTexCoord1sv(target, v);
    }

    static void glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t) {
        getInstance()._mglMultiTexCoord2d(target, s, t);
    }

    static void glMultiTexCoord2dv(GLenum target, const GLdouble* v) {
        getInstance()._mglMultiTexCoord2dv(target, v);
    }

    static void glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t) {
        getInstance()._mglMultiTexCoord2f(target, s, t);
    }

    static void glMultiTexCoord2fv(GLenum target, const GLfloat* v) {
        getInstance()._mglMultiTexCoord2fv(target, v);
    }

    static void glMultiTexCoord2i(GLenum target, GLint s, GLint t) {
        getInstance()._mglMultiTexCoord2i(target, s, t);
    }

    static void glMultiTexCoord2iv(GLenum target, const GLint* v) {
        getInstance()._mglMultiTexCoord2iv(target, v);
    }

    static void glMultiTexCoord2s(GLenum target, GLshort s, GLshort t) {
        getInstance()._mglMultiTexCoord2s(target, s, t);
    }

    static void glMultiTexCoord2sv(GLenum target, const GLshort* v) {
        getInstance()._mglMultiTexCoord2sv(target, v);
    }

    static void glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r) {
        getInstance()._mglMultiTexCoord3d(target, s, t, r);
    }

    static void glMultiTexCoord3dv(GLenum target, const GLdouble* v) {
        getInstance()._mglMultiTexCoord3dv(target, v);
    }

    static void glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r) {
        getInstance()._mglMultiTexCoord3f(target, s, t, r);
    }

    static void glMultiTexCoord3fv(GLenum target, const GLfloat* v) {
        getInstance()._mglMultiTexCoord3fv(target, v);
    }

    static void glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r) {
        getInstance()._mglMultiTexCoord3i(target, s, t, r);
    }

    static void glMultiTexCoord3iv(GLenum target, const GLint* v) {
        getInstance()._mglMultiTexCoord3iv(target, v);
    }

    static void glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r) {
        getInstance()._mglMultiTexCoord3s(target, s, t, r);
    }

    static void glMultiTexCoord3sv(GLenum target, const GLshort* v) {
        getInstance()._mglMultiTexCoord3sv(target, v);
    }

    static void glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
        getInstance()._mglMultiTexCoord4d(target, s, t, r, q);
    }

    static void glMultiTexCoord4dv(GLenum target, const GLdouble* v) {
        getInstance()._mglMultiTexCoord4dv(target, v);
    }

    static void glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
        getInstance()._mglMultiTexCoord4f(target, s, t, r, q);
    }

    static void glMultiTexCoord4fv(GLenum target, const GLfloat* v) {
        getInstance()._mglMultiTexCoord4fv(target, v);
    }

    static void glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q) {
        getInstance()._mglMultiTexCoord4i(target, s, t, r, q);
    }

    static void glMultiTexCoord4iv(GLenum target, const GLint* v) {
        getInstance()._mglMultiTexCoord4iv(target, v);
    }

    static void glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {
        getInstance()._mglMultiTexCoord4s(target, s, t, r, q);
    }

    static void glMultiTexCoord4sv(GLenum target, const GLshort* v) {
        getInstance()._mglMultiTexCoord4sv(target, v);
    }

    static void glLoadTransposeMatrixf(const GLfloat* m) {
        getInstance()._mglLoadTransposeMatrixf(m);
    }

    static void glLoadTransposeMatrixd(const GLdouble* m) {
        getInstance()._mglLoadTransposeMatrixd(m);
    }

    static void glMultTransposeMatrixf(const GLfloat* m) {
        getInstance()._mglMultTransposeMatrixf(m);
    }

    static void glMultTransposeMatrixd(const GLdouble* m) {
        getInstance()._mglMultTransposeMatrixd(m);
    }

    static void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
        getInstance()._mglBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    }

    static void glMultiDrawArrays(GLenum mode, const GLint* first, const GLsizei* count, GLsizei drawcount) {
        getInstance()._mglMultiDrawArrays(mode, first, count, drawcount);
    }

    static void glMultiDrawElements(GLenum mode, const GLsizei* count, GLenum type, const void** indices, GLsizei drawcount) {
        getInstance()._mglMultiDrawElements(mode, count, type, indices, drawcount);
    }

    static void glPointParameterf(GLenum pname, GLfloat param) {
        getInstance()._mglPointParameterf(pname, param);
    }

    static void glPointParameterfv(GLenum pname, const GLfloat* params) {
        getInstance()._mglPointParameterfv(pname, params);
    }

    static void glPointParameteri(GLenum pname, GLint param) {
        getInstance()._mglPointParameteri(pname, param);
    }

    static void glPointParameteriv(GLenum pname, const GLint* params) {
        getInstance()._mglPointParameteriv(pname, params);
    }

    static void glFogCoordf(GLfloat coord) {
        getInstance()._mglFogCoordf(coord);
    }

    static void glFogCoordfv(const GLfloat* coord) {
        getInstance()._mglFogCoordfv(coord);
    }

    static void glFogCoordd(GLdouble coord) {
        getInstance()._mglFogCoordd(coord);
    }

    static void glFogCoorddv(const GLdouble* coord) {
        getInstance()._mglFogCoorddv(coord);
    }

    static void glFogCoordPointer(GLenum type, GLsizei stride, const void* pointer) {
        getInstance()._mglFogCoordPointer(type, stride, pointer);
    }

    static void glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue) {
        getInstance()._mglSecondaryColor3b(red, green, blue);
    }

    static void glSecondaryColor3bv(const GLbyte* v) {
        getInstance()._mglSecondaryColor3bv(v);
    }

    static void glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue) {
        getInstance()._mglSecondaryColor3d(red, green, blue);
    }

    static void glSecondaryColor3dv(const GLdouble* v) {
        getInstance()._mglSecondaryColor3dv(v);
    }

    static void glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue) {
        getInstance()._mglSecondaryColor3f(red, green, blue);
    }

    static void glSecondaryColor3fv(const GLfloat* v) {
        getInstance()._mglSecondaryColor3fv(v);
    }

    static void glSecondaryColor3i(GLint red, GLint green, GLint blue) {
        getInstance()._mglSecondaryColor3i(red, green, blue);
    }

    static void glSecondaryColor3iv(const GLint* v) {
        getInstance()._mglSecondaryColor3iv(v);
    }

    static void glSecondaryColor3s(GLshort red, GLshort green, GLshort blue) {
        getInstance()._mglSecondaryColor3s(red, green, blue);
    }

    static void glSecondaryColor3sv(const GLshort* v) {
        getInstance()._mglSecondaryColor3sv(v);
    }

    static void glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
        getInstance()._mglSecondaryColor3ub(red, green, blue);
    }

    static void glSecondaryColor3ubv(const GLubyte* v) {
        getInstance()._mglSecondaryColor3ubv(v);
    }

    static void glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue) {
        getInstance()._mglSecondaryColor3ui(red, green, blue);
    }

    static void glSecondaryColor3uiv(const GLuint* v) {
        getInstance()._mglSecondaryColor3uiv(v);
    }

    static void glSecondaryColor3us(GLushort red, GLushort green, GLushort blue) {
        getInstance()._mglSecondaryColor3us(red, green, blue);
    }

    static void glSecondaryColor3usv(const GLushort* v) {
        getInstance()._mglSecondaryColor3usv(v);
    }

    static void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void* pointer) {
        getInstance()._mglSecondaryColorPointer(size, type, stride, pointer);
    }

    static void glWindowPos2d(GLdouble x, GLdouble y) {
        getInstance()._mglWindowPos2d(x, y);
    }

    static void glWindowPos2dv(const GLdouble* v) {
        getInstance()._mglWindowPos2dv(v);
    }

    static void glWindowPos2f(GLfloat x, GLfloat y) {
        getInstance()._mglWindowPos2f(x, y);
    }

    static void glWindowPos2fv(const GLfloat* v) {
        getInstance()._mglWindowPos2fv(v);
    }

    static void glWindowPos2i(GLint x, GLint y) {
        getInstance()._mglWindowPos2i(x, y);
    }

    static void glWindowPos2iv(const GLint* v) {
        getInstance()._mglWindowPos2iv(v);
    }

    static void glWindowPos2s(GLshort x, GLshort y) {
        getInstance()._mglWindowPos2s(x, y);
    }

    static void glWindowPos2sv(const GLshort* v) {
        getInstance()._mglWindowPos2sv(v);
    }

    static void glWindowPos3d(GLdouble x, GLdouble y, GLdouble z) {
        getInstance()._mglWindowPos3d(x, y, z);
    }

    static void glWindowPos3dv(const GLdouble* v) {
        getInstance()._mglWindowPos3dv(v);
    }

    static void glWindowPos3f(GLfloat x, GLfloat y, GLfloat z) {
        getInstance()._mglWindowPos3f(x, y, z);
    }

    static void glWindowPos3fv(const GLfloat* v) {
        getInstance()._mglWindowPos3fv(v);
    }

    static void glWindowPos3i(GLint x, GLint y, GLint z) {
        getInstance()._mglWindowPos3i(x, y, z);
    }

    static void glWindowPos3iv(const GLint* v) {
        getInstance()._mglWindowPos3iv(v);
    }

    static void glWindowPos3s(GLshort x, GLshort y, GLshort z) {
        getInstance()._mglWindowPos3s(x, y, z);
    }

    static void glWindowPos3sv(const GLshort* v) {
        getInstance()._mglWindowPos3sv(v);
    }

    static void glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
        getInstance()._mglBlendColor(red, green, blue, alpha);
    }

    static void glBlendEquation(GLenum mode) {
        getInstance()._mglBlendEquation(mode);
    }

    static void glGenQueries(GLsizei n, GLuint* ids) {
        getInstance()._mglGenQueries(n, ids);
    }

    static void glDeleteQueries(GLsizei n, const GLuint* ids) {
        getInstance()._mglDeleteQueries(n, ids);
    }

    static GLboolean glIsQuery(GLuint id) {
        return getInstance()._mglIsQuery(id);
    }

    static void glBeginQuery(GLenum target, GLuint id) {
        getInstance()._mglBeginQuery(target, id);
    }

    static void glEndQuery(GLenum target) {
        getInstance()._mglEndQuery(target);
    }

    static void glGetQueryiv(GLenum target, GLenum pname, GLint* params) {
        getInstance()._mglGetQueryiv(target, pname, params);
    }

    static void glGetQueryObjectiv(GLuint id, GLenum pname, GLint* params) {
        getInstance()._mglGetQueryObjectiv(id, pname, params);
    }

    static void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint* params) {
        getInstance()._mglGetQueryObjectuiv(id, pname, params);
    }

    static void glBindBuffer(GLenum target, GLuint buffer) {
        getInstance()._mglBindBuffer(target, buffer);
    }

    static void glDeleteBuffers(GLsizei n, const GLuint* buffers) {
        getInstance()._mglDeleteBuffers(n, buffers);
    }

    static void glGenBuffers(GLsizei n, GLuint* buffers) {
        getInstance()._mglGenBuffers(n, buffers);
    }

    static GLboolean glIsBuffer(GLuint buffer) {
        return getInstance()._mglIsBuffer(buffer);
    }

    static void glBufferData(GLenum target, GLsizeiptr size, const void* data, GLenum usage) {
        getInstance()._mglBufferData(target, size, data, usage);
    }

    static void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void* data) {
        getInstance()._mglBufferSubData(target, offset, size, data);
    }

    static void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void* data) {
        getInstance()._mglGetBufferSubData(target, offset, size, data);
    }

    static void* glMapBuffer(GLenum target, GLenum access) {
        return getInstance()._mglMapBuffer(target, access);
    }

    static GLboolean glUnmapBuffer(GLenum target) {
        return getInstance()._mglUnmapBuffer(target);
    }

    static void glGetBufferParameteriv(GLenum target, GLenum pname, GLint* params) {
        getInstance()._mglGetBufferParameteriv(target, pname, params);
    }

    static void glGetBufferPointerv(GLenum target, GLenum pname, void** params) {
        getInstance()._mglGetBufferPointerv(target, pname, params);
    }

    static void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) {
        getInstance()._mglBlendEquationSeparate(modeRGB, modeAlpha);
    }

    static void glDrawBuffers(GLsizei n, const GLenum* bufs) {
        getInstance()._mglDrawBuffers(n, bufs);
    }

    static void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
        getInstance()._mglStencilOpSeparate(face, sfail, dpfail, dppass);
    }

    static void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) {
        getInstance()._mglStencilFuncSeparate(face, func, ref, mask);
    }

    static void glStencilMaskSeparate(GLenum face, GLuint mask) {
        getInstance()._mglStencilMaskSeparate(face, mask);
    }

    static void glAttachShader(GLuint program, GLuint shader) {
        getInstance()._mglAttachShader(program, shader);
    }

    static void glBindAttribLocation(GLuint program, GLuint index, const GLchar* name) {
        getInstance()._mglBindAttribLocation(program, index, name);
    }

    static void glCompileShader(GLuint shader) {
        getInstance()._mglCompileShader(shader);
    }

    static GLuint glCreateProgram() {
        return getInstance()._mglCreateProgram();
    }

    static GLuint glCreateShader(GLenum type) {
        return getInstance()._mglCreateShader(type);
    }

    static void glDeleteProgram(GLuint program) {
        getInstance()._mglDeleteProgram(program);
    }

    static void glDeleteShader(GLuint shader) {
        getInstance()._mglDeleteShader(shader);
    }

    static void glDetachShader(GLuint program, GLuint shader) {
        getInstance()._mglDetachShader(program, shader);
    }

    static void glDisableVertexAttribArray(GLuint index) {
        getInstance()._mglDisableVertexAttribArray(index);
    }

    static void glEnableVertexAttribArray(GLuint index) {
        getInstance()._mglEnableVertexAttribArray(index);
    }

    static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name) {
        getInstance()._mglGetActiveAttrib(program, index, bufSize, length, size, type, name);
    }

    static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name) {
        getInstance()._mglGetActiveUniform(program, index, bufSize, length, size, type, name);
    }

    static void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders) {
        getInstance()._mglGetAttachedShaders(program, maxCount, count, shaders);
    }

    static GLint glGetAttribLocation(GLuint program, const GLchar* name) {
        return getInstance()._mglGetAttribLocation(program, name);
    }

    static void glGetProgramiv(GLuint program, GLenum pname, GLint* params) {
        getInstance()._mglGetProgramiv(program, pname, params);
    }

    static void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog) {
        getInstance()._mglGetProgramInfoLog(program, bufSize, length, infoLog);
    }

    static void glGetShaderiv(GLuint shader, GLenum pname, GLint* params) {
        getInstance()._mglGetShaderiv(shader, pname, params);
    }

    static void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog) {
        getInstance()._mglGetShaderInfoLog(shader, bufSize, length, infoLog);
    }

    static void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source) {
        getInstance()._mglGetShaderSource(shader, bufSize, length, source);
    }

    static GLint glGetUniformLocation(GLuint program, const GLchar* name) {
        return getInstance()._mglGetUniformLocation(program, name);
    }

    static void glGetUniformfv(GLuint program, GLint location, GLfloat* params) {
        getInstance()._mglGetUniformfv(program, location, params);
    }

    static void glGetUniformiv(GLuint program, GLint location, GLint* params) {
        getInstance()._mglGetUniformiv(program, location, params);
    }

    static void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble* params) {
        getInstance()._mglGetVertexAttribdv(index, pname, params);
    }

    static void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat* params) {
        getInstance()._mglGetVertexAttribfv(index, pname, params);
    }

    static void glGetVertexAttribiv(GLuint index, GLenum pname, GLint* params) {
        getInstance()._mglGetVertexAttribiv(index, pname, params);
    }

    static void glGetVertexAttribPointerv(GLuint index, GLenum pname, void** pointer) {
        getInstance()._mglGetVertexAttribPointerv(index, pname, pointer);
    }

    static GLboolean glIsProgram(GLuint program) {
        return getInstance()._mglIsProgram(program);
    }

    static GLboolean glIsShader(GLuint shader) {
        return getInstance()._mglIsShader(shader);
    }

    static void glLinkProgram(GLuint program) {
        getInstance()._mglLinkProgram(program);
    }

    static void glShaderSource(GLuint shader, GLsizei count, const GLchar** string, const GLint* length) {
        getInstance()._mglShaderSource(shader, count, string, length);
    }

    static void glUseProgram(GLuint program) {
        getInstance()._mglUseProgram(program);
    }

    static void glUniform1f(GLint location, GLfloat v0) {
        getInstance()._mglUniform1f(location, v0);
    }

    static void glUniform2f(GLint location, GLfloat v0, GLfloat v1) {
        getInstance()._mglUniform2f(location, v0, v1);
    }

    static void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
        getInstance()._mglUniform3f(location, v0, v1, v2);
    }

    static void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
        getInstance()._mglUniform4f(location, v0, v1, v2, v3);
    }

    static void glUniform1i(GLint location, GLint v0) {
        getInstance()._mglUniform1i(location, v0);
    }

    static void glUniform2i(GLint location, GLint v0, GLint v1) {
        getInstance()._mglUniform2i(location, v0, v1);
    }

    static void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2) {
        getInstance()._mglUniform3i(location, v0, v1, v2);
    }

    static void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
        getInstance()._mglUniform4i(location, v0, v1, v2, v3);
    }

    static void glUniform1fv(GLint location, GLsizei count, const GLfloat* value) {
        getInstance()._mglUniform1fv(location, count, value);
    }

    static void glUniform2fv(GLint location, GLsizei count, const GLfloat* value) {
        getInstance()._mglUniform2fv(location, count, value);
    }

    static void glUniform3fv(GLint location, GLsizei count, const GLfloat* value) {
        getInstance()._mglUniform3fv(location, count, value);
    }

    static void glUniform4fv(GLint location, GLsizei count, const GLfloat* value) {
        getInstance()._mglUniform4fv(location, count, value);
    }

    static void glUniform1iv(GLint location, GLsizei count, const GLint* value) {
        getInstance()._mglUniform1iv(location, count, value);
    }

    static void glUniform2iv(GLint location, GLsizei count, const GLint* value) {
        getInstance()._mglUniform2iv(location, count, value);
    }

    static void glUniform3iv(GLint location, GLsizei count, const GLint* value) {
        getInstance()._mglUniform3iv(location, count, value);
    }

    static void glUniform4iv(GLint location, GLsizei count, const GLint* value) {
        getInstance()._mglUniform4iv(location, count, value);
    }

    static void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) {
        getInstance()._mglUniformMatrix2fv(location, count, transpose, value);
    }

    static void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) {
        getInstance()._mglUniformMatrix3fv(location, count, transpose, value);
    }

    static void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) {
        getInstance()._mglUniformMatrix4fv(location, count, transpose, value);
    }

    static void glValidateProgram(GLuint program) {
        getInstance()._mglValidateProgram(program);
    }

    static void glVertexAttrib1d(GLuint index, GLdouble x) {
        getInstance()._mglVertexAttrib1d(index, x);
    }

    static void glVertexAttrib1dv(GLuint index, const GLdouble* v) {
        getInstance()._mglVertexAttrib1dv(index, v);
    }

    static void glVertexAttrib1f(GLuint index, GLfloat x) {
        getInstance()._mglVertexAttrib1f(index, x);
    }

    static void glVertexAttrib1fv(GLuint index, const GLfloat* v) {
        getInstance()._mglVertexAttrib1fv(index, v);
    }

    static void glVertexAttrib1s(GLuint index, GLshort x) {
        getInstance()._mglVertexAttrib1s(index, x);
    }

    static void glVertexAttrib1sv(GLuint index, const GLshort* v) {
        getInstance()._mglVertexAttrib1sv(index, v);
    }

    static void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) {
        getInstance()._mglVertexAttrib2d(index, x, y);
    }

    static void glVertexAttrib2dv(GLuint index, const GLdouble* v) {
        getInstance()._mglVertexAttrib2dv(index, v);
    }

    static void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) {
        getInstance()._mglVertexAttrib2f(index, x, y);
    }

    static void glVertexAttrib2fv(GLuint index, const GLfloat* v) {
        getInstance()._mglVertexAttrib2fv(index, v);
    }

    static void glVertexAttrib2s(GLuint index, GLshort x, GLshort y) {
        getInstance()._mglVertexAttrib2s(index, x, y);
    }

    static void glVertexAttrib2sv(GLuint index, const GLshort* v) {
        getInstance()._mglVertexAttrib2sv(index, v);
    }

    static void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
        getInstance()._mglVertexAttrib3d(index, x, y, z);
    }

    static void glVertexAttrib3dv(GLuint index, const GLdouble* v) {
        getInstance()._mglVertexAttrib3dv(index, v);
    }

    static void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
        getInstance()._mglVertexAttrib3f(index, x, y, z);
    }

    static void glVertexAttrib3fv(GLuint index, const GLfloat* v) {
        getInstance()._mglVertexAttrib3fv(index, v);
    }

    static void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) {
        getInstance()._mglVertexAttrib3s(index, x, y, z);
    }

    static void glVertexAttrib3sv(GLuint index, const GLshort* v) {
        getInstance()._mglVertexAttrib3sv(index, v);
    }

    static void glVertexAttrib4Nbv(GLuint index, const GLbyte* v) {
        getInstance()._mglVertexAttrib4Nbv(index, v);
    }

    static void glVertexAttrib4Niv(GLuint index, const GLint* v) {
        getInstance()._mglVertexAttrib4Niv(index, v);
    }

    static void glVertexAttrib4Nsv(GLuint index, const GLshort* v) {
        getInstance()._mglVertexAttrib4Nsv(index, v);
    }

    static void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
        getInstance()._mglVertexAttrib4Nub(index, x, y, z, w);
    }

    static void glVertexAttrib4Nubv(GLuint index, const GLubyte* v) {
        getInstance()._mglVertexAttrib4Nubv(index, v);
    }

    static void glVertexAttrib4Nuiv(GLuint index, const GLuint* v) {
        getInstance()._mglVertexAttrib4Nuiv(index, v);
    }

    static void glVertexAttrib4Nusv(GLuint index, const GLushort* v) {
        getInstance()._mglVertexAttrib4Nusv(index, v);
    }

    static void glVertexAttrib4bv(GLuint index, const GLbyte* v) {
        getInstance()._mglVertexAttrib4bv(index, v);
    }

    static void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
        getInstance()._mglVertexAttrib4d(index, x, y, z, w);
    }

    static void glVertexAttrib4dv(GLuint index, const GLdouble* v) {
        getInstance()._mglVertexAttrib4dv(index, v);
    }

    static void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
        getInstance()._mglVertexAttrib4f(index, x, y, z, w);
    }

    static void glVertexAttrib4fv(GLuint index, const GLfloat* v) {
        getInstance()._mglVertexAttrib4fv(index, v);
    }

    static void glVertexAttrib4iv(GLuint index, const GLint* v) {
        getInstance()._mglVertexAttrib4iv(index, v);
    }

    static void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
        getInstance()._mglVertexAttrib4s(index, x, y, z, w);
    }

    static void glVertexAttrib4sv(GLuint index, const GLshort* v) {
        getInstance()._mglVertexAttrib4sv(index, v);
    }

    static void glVertexAttrib4ubv(GLuint index, const GLubyte* v) {
        getInstance()._mglVertexAttrib4ubv(index, v);
    }

    static void glVertexAttrib4uiv(GLuint index, const GLuint* v) {
        getInstance()._mglVertexAttrib4uiv(index, v);
    }

    static void glVertexAttrib4usv(GLuint index, const GLushort* v) {
        getInstance()._mglVertexAttrib4usv(index, v);
    }

    static void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer) {
        getInstance()._mglVertexAttribPointer(index, size, type, normalized, stride, pointer);
    }

    static void glBindBufferARB(GLenum target, GLuint buffer) {
        getInstance()._mglBindBufferARB(target, buffer);
    }

    static void glDeleteBuffersARB(GLsizei n, const GLuint* buffers) {
        getInstance()._mglDeleteBuffersARB(n, buffers);
    }

    static void glGenBuffersARB(GLsizei n, GLuint* buffers) {
        getInstance()._mglGenBuffersARB(n, buffers);
    }

    static GLboolean glIsBufferARB(GLuint buffer) {
        return getInstance()._mglIsBufferARB(buffer);
    }

    static void glBufferDataARB(GLenum target, GLsizeiptrARB size, const void* data, GLenum usage) {
        getInstance()._mglBufferDataARB(target, size, data, usage);
    }

    static void glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void* data) {
        getInstance()._mglBufferSubDataARB(target, offset, size, data);
    }

    static void glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void* data) {
        getInstance()._mglGetBufferSubDataARB(target, offset, size, data);
    }

    static void* glMapBufferARB(GLenum target, GLenum access) {
        return getInstance()._mglMapBufferARB(target, access);
    }

    static GLboolean glUnmapBufferARB(GLenum target) {
        return getInstance()._mglUnmapBufferARB(target);
    }

    static void glGetBufferParameterivARB(GLenum target, GLenum pname, GLint* params) {
        getInstance()._mglGetBufferParameterivARB(target, pname, params);
    }

    static void glGetBufferPointervARB(GLenum target, GLenum pname, void** params) {
        getInstance()._mglGetBufferPointervARB(target, pname, params);
    }

    static void glBindVertexArray(GLuint array) {
        getInstance()._mglBindVertexArray(array);
    }

    static void glDeleteVertexArrays(GLsizei n, const GLuint* arrays) {
        getInstance()._mglDeleteVertexArrays(n, arrays);
    }

    static void glGenVertexArrays(GLsizei n, GLuint* arrays) {
        getInstance()._mglGenVertexArrays(n, arrays);
    }

    static GLboolean glIsVertexArray(GLuint array) {
        return getInstance()._mglIsVertexArray(array);
    }

    static GLboolean glIsRenderbuffer(GLuint renderbuffer) {
        return getInstance()._mglIsRenderbuffer(renderbuffer);
    }

    static void glBindRenderbuffer(GLenum target, GLuint renderbuffer) {
        getInstance()._mglBindRenderbuffer(target, renderbuffer);
    }

    static void glDeleteRenderbuffers(GLsizei n, const GLuint* renderbuffers) {
        getInstance()._mglDeleteRenderbuffers(n, renderbuffers);
    }

    static void glGenRenderbuffers(GLsizei n, GLuint* renderbuffers) {
        getInstance()._mglGenRenderbuffers(n, renderbuffers);
    }

    static void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
        getInstance()._mglRenderbufferStorage(target, internalformat, width, height);
    }

    static void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint* params) {
        getInstance()._mglGetRenderbufferParameteriv(target, pname, params);
    }

    static GLboolean glIsFramebuffer(GLuint framebuffer) {
        return getInstance()._mglIsFramebuffer(framebuffer);
    }

    static void glBindFramebuffer(GLenum target, GLuint framebuffer) {
        getInstance()._mglBindFramebuffer(target, framebuffer);
    }

    static void glDeleteFramebuffers(GLsizei n, const GLuint* framebuffers) {
        getInstance()._mglDeleteFramebuffers(n, framebuffers);
    }

    static void glGenFramebuffers(GLsizei n, GLuint* framebuffers) {
        getInstance()._mglGenFramebuffers(n, framebuffers);
    }

    static GLenum glCheckFramebufferStatus(GLenum target) {
        return getInstance()._mglCheckFramebufferStatus(target);
    }

    static void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
        getInstance()._mglFramebufferTexture1D(target, attachment, textarget, texture, level);
    }

    static void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
        getInstance()._mglFramebufferTexture2D(target, attachment, textarget, texture, level);
    }

    static void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
        getInstance()._mglFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
    }

    static void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
        getInstance()._mglFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
    }

    static void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint* params) {
        getInstance()._mglGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
    }

    static void glGenerateMipmap(GLenum target) {
        getInstance()._mglGenerateMipmap(target);
    }

    static void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
        getInstance()._mglBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    }

    static void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
        getInstance()._mglRenderbufferStorageMultisample(target, samples, internalformat, width, height);
    }

    static void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
        getInstance()._mglFramebufferTextureLayer(target, attachment, texture, level, layer);
    }

    static GLboolean glIsRenderbufferEXT(GLuint renderbuffer) {
        return getInstance()._mglIsRenderbufferEXT(renderbuffer);
    }

    static void glBindRenderbufferEXT(GLenum target, GLuint renderbuffer) {
        getInstance()._mglBindRenderbufferEXT(target, renderbuffer);
    }

    static void glDeleteRenderbuffersEXT(GLsizei n, const GLuint* renderbuffers) {
        getInstance()._mglDeleteRenderbuffersEXT(n, renderbuffers);
    }

    static void glGenRenderbuffersEXT(GLsizei n, GLuint* renderbuffers) {
        getInstance()._mglGenRenderbuffersEXT(n, renderbuffers);
    }

    static void glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
        getInstance()._mglRenderbufferStorageEXT(target, internalformat, width, height);
    }

    static void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint* params) {
        getInstance()._mglGetRenderbufferParameterivEXT(target, pname, params);
    }

    static GLboolean glIsFramebufferEXT(GLuint framebuffer) {
        return getInstance()._mglIsFramebufferEXT(framebuffer);
    }

    static void glBindFramebufferEXT(GLenum target, GLuint framebuffer) {
        getInstance()._mglBindFramebufferEXT(target, framebuffer);
    }

    static void glDeleteFramebuffersEXT(GLsizei n, const GLuint* framebuffers) {
        getInstance()._mglDeleteFramebuffersEXT(n, framebuffers);
    }

    static void glGenFramebuffersEXT(GLsizei n, GLuint* framebuffers) {
        getInstance()._mglGenFramebuffersEXT(n, framebuffers);
    }

    static GLenum glCheckFramebufferStatusEXT(GLenum target) {
        return getInstance()._mglCheckFramebufferStatusEXT(target);
    }

    static void glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
        getInstance()._mglFramebufferTexture1DEXT(target, attachment, textarget, texture, level);
    }

    static void glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
        getInstance()._mglFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
    }

    static void glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
        getInstance()._mglFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
    }

    static void glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
        getInstance()._mglFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
    }

    static void glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint* params) {
        getInstance()._mglGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params);
    }

    static void glGenerateMipmapEXT(GLenum target) {
        getInstance()._mglGenerateMipmapEXT(target);
    }

    static void glBindVertexArrayAPPLE(GLuint array) {
        getInstance()._mglBindVertexArrayAPPLE(array);
    }

    static void glDeleteVertexArraysAPPLE(GLsizei n, const GLuint* arrays) {
        getInstance()._mglDeleteVertexArraysAPPLE(n, arrays);
    }

    static void glGenVertexArraysAPPLE(GLsizei n, GLuint* arrays) {
        getInstance()._mglGenVertexArraysAPPLE(n, arrays);
    }

    static GLboolean glIsVertexArrayAPPLE(GLuint array) {
        return getInstance()._mglIsVertexArrayAPPLE(array);
    }





}; // class OSGLFunctions


typedef OSGLFunctions<true> GL_GPU;
typedef OSGLFunctions<false> GL_CPU;


} // namespace OFX

#endif // OSGLFUNCTIONS_H
